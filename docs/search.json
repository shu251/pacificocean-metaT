[
  {
    "objectID": "env-metadata.html",
    "href": "env-metadata.html",
    "title": "Environmental metadata",
    "section": "",
    "text": "library(tidyverse); library(patchwork)\n\n\ntmp_all_metadata <- read.csv(\"input-data/All_metadata.csv\")\n# colnames(tmp_all_metadata)\n# unique(tmp_all_metadata$Site)\n# View(tmp_all_metadata)\njuly <- read.delim(\"input-data/flor_env_ALOHAJuly_SPOT.txt\")\nmarch <- read.delim(\"input-data/flour_ALOHAMarch.txt\")\n\n\n# head(july)\n# head(march)\nfluor <- july %>% \n  left_join(march) %>% \n  pivot_longer(cols = SPOT:ALOHAMarch, names_to = \"Site\", values_to = \"Fluor\")\n\nJoining with `by = join_by(Depth)`\n\n# unique(fluor$Site)\nmetadata_all <- tmp_all_metadata %>% \n  filter((!Site == \"ALOHA\")) %>% \n  select(-X) %>% \n  left_join(fluor) %>% \n  pivot_longer(cols = Temp:Fluor, names_to = \"VARIABLE\", values_to = \"VALUE\")\n\nJoining with `by = join_by(Site, Depth, Fluor)`\n\n# head(metadata_all)\n# unique(metadata_all$Site)\n\nFigure aesthetics\n\nsite_order <- c(\"SPOT\", \"PortofLA\", \"Catalina\", \"ALOHAJuly\", \"ALOHAMarch\")\nsite_label <- c(\"SPOT\", \"Port of LA\", \"Catalina\", \"ALOHA July\", \"ALOHA March\")\nsite_color_fill <- c(\"#3288bd\", \"#8073ac\", \"#66bd63\", \"#e6f598\", \"#d53e4f\")\nsite_color_fill_nopola <- c(\"#3288bd\", \"#66bd63\", \"#e6f598\", \"#d53e4f\")\n\nIsolate specific depths, add a label\n\nspot<-c(1,150,885)\nspotsite<-c(\"SPOT\", \"Catalina\", \"PortofLA\")\naloha<-c(1,120,150,1000)\n\nmetadata_pt_depth <- metadata_all %>% \n  filter(Site %in% spotsite & Depth %in% spot | grepl(\"ALOHA\", Site) & Depth %in% aloha) %>% \n  add_column(Label = \"discrete\") %>% \n  mutate(VAR_ORDER = factor(VARIABLE, levels = c(\"Temp\", \"Fluor\", \"Sal\", \"Oxy\"), labels = c(\"Temperature\", \"Chlorophyll\", \"Salinity\", \"Oxygen\"))) %>% \n  mutate(SITE_ORDER = factor(Site, levels = site_order, labels = site_label))\n# unique(metadata_all$Site)\n\n\nallenv <- metadata_all %>% \n  mutate(VAR_ORDER = factor(VARIABLE, levels = c(\"Temp\", \"Fluor\", \"Sal\", \"Oxy\"), labels = c(\"Temperature\", \"Chlorophyll\", \"Salinity\", \"Oxygen\"))) %>% \n  mutate(SITE_ORDER = factor(Site, levels = site_order, labels = site_label)) %>% \n  arrange(Depth) %>% \n  ggplot(aes(y = Depth, x = VALUE)) +\n  geom_hline(yintercept = 0, alpha = 0.3) +\n  geom_path(size = 1, aes(color = SITE_ORDER)) +\n  geom_point(data = metadata_pt_depth, size = 2, aes(y = Depth, x = VALUE, fill = SITE_ORDER, shape = SITE_ORDER)) +\n    scale_shape_manual(values = c(21, 22, 23, 24, 25)) +\n    scale_fill_manual(values = site_color_fill) +\n    scale_color_manual(values = site_color_fill) +\n  scale_y_reverse() +\n  facet_grid(. ~ VAR_ORDER, scales = \"free\", switch = \"both\") +\n  theme_linedraw() +\n  labs(x = \"\", y = \"Depth (m)\") +\n  theme(strip.background = element_blank(),\n        strip.placement = \"outside\",\n        strip.text = element_text(color = \"black\"),\n        legend.title = element_blank())\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\nallenv\n\nWarning: Removed 2 rows containing missing values (`geom_path()`).\n\n\n\n\n\n\nno_pola <- metadata_all %>% \n  mutate(VAR_ORDER = factor(VARIABLE, levels = c(\"Temp\", \"Fluor\", \"Sal\", \"Oxy\"), labels = c(\"Temperature\", \"Chlorophyll\", \"Salinity\", \"Oxygen\"))) %>% \n  mutate(SITE_ORDER = factor(Site, levels = site_order, labels = site_label)) %>% \n  arrange(Depth) %>% \n  filter(Site != \"PortofLA\") %>% \n  ggplot(aes(y = Depth, x = VALUE)) +\n  geom_hline(yintercept = 0, alpha = 0.3) +\n  geom_path(size = 1, aes(color = SITE_ORDER)) +\n  geom_point(data = (metadata_pt_depth %>% filter(Site != \"PortofLA\")), size = 2, aes(y = Depth, x = VALUE, fill = SITE_ORDER, shape = SITE_ORDER)) +\n    scale_shape_manual(values = c(21, 22, 23, 24, 25)) +\n    scale_fill_manual(values = site_color_fill_nopola) +\n    scale_color_manual(values = site_color_fill_nopola) +\n  scale_y_reverse() +\n  facet_grid(. ~ VAR_ORDER, scales = \"free\", switch = \"both\") +\n  theme_linedraw() +\n  labs(x = \"\", y = \"Depth (m)\") +\n  theme(strip.background = element_blank(),\n        strip.placement = \"outside\",\n        strip.text = element_text(color = \"black\"),\n        legend.title = element_blank())\n\nno_pola\n\nWarning: Removed 2 rows containing missing values (`geom_path()`).\n\n\n\n\n\n\n# svg(\"figs/water-col.svg\", w = 8, h = 7)\nallenv + no_pola + patchwork::plot_layout(ncol = 1)\n\nWarning: Removed 2 rows containing missing values (`geom_path()`).\nRemoved 2 rows containing missing values (`geom_path()`).\n\n\n\n\n# dev.off()\n\n# Requires manual modification of chlorophyll with Port of LA sample"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Metatranscriptome survey of Pacific Ocean",
    "section": "",
    "text": "Home for code and analysis for microeukaryotic metatranscriptome survey. From github repo: https://github.com/shu251/pacificocean-metaT in prep\nTO DO:"
  },
  {
    "objectID": "metat-analysis.html",
    "href": "metat-analysis.html",
    "title": "Analysis of metatranscriptome data",
    "section": "",
    "text": "We have taken outputs from eukrhythmic and performed transcript-level normalization so we can do downstream analysis. There are two core questions for this metatranscriptome study that can be subset into untargeted and targeted approaches. Questions stem from previous studies at both the NPSG and sites off of coastal California.\n\n\n\n\n\n\n\n\n\n(1) How does nutrient utilization among euphotic zone phytoplankton vary between coastal California and the NPSG?\n(2) Do we see a similar euphotic vs. sub-euphotic shift in the metabolic potential of taxa observed at coastal California and the NPSG?\n\n\nUntargeted\n\nSubset whole dataset to taxa of interest (haptophytes, dinos, diatoms, archaeplastida), and to transcripts that were annotated.\nRun in DEseq2 to determine differentially expressed genes between: SPOT surface vs. all other samples in the euphotic zone.\nTally what appears similar and different across sample comparisons\nThen tally what appears different between taxa..\n\n\nSubset whole dataset to taxa of interest, dinos, ciliates, rhizaria, haptophytes.\nRun in DESeq2. Compare all euphotic to all subeuphotic. Then NPSG euphotic to subeuphotic. Then SPOT euphotic to subeuphotic.\nTally what appears similar and different across sample comparisons\nThen tally what appears different between taxa.\n\n\n\nTargeted\nSUBSET only those 4 groups from above. Run the count normalization, then isolate the key genes of interest. What is happening with critical N&P pathways?\nSUBSET only those 4 groups from above. Run the count normalization, then isolate the all the key genes of interest. Paying particular attention to phagotrophy-based genes."
  },
  {
    "objectID": "metat-analysis.html#input-all-tpm-results",
    "href": "metat-analysis.html#input-all-tpm-results",
    "title": "Analysis of metatranscriptome data",
    "section": "Input all TPM results",
    "text": "Input all TPM results\nBelow R objects sourced by first isolating only the eukaryotic transcripts, averaging across replicates, and placing into long format.\n\n# | echo: true\n# | eval: false\nload(file = \"Avg_scaled_tpm_08222023.RData\", verbose = T)\ntaxfxn <- read.csv(\"TaxonomicAndFunctionalAnnotations.csv\")\n\nImport metadata as well.\n\n# metadata_tmp <- read.delim(\"input-data/complete-sample-list.txt\", header = TRUE, sep = \",\")\n# sample_metadata <- read.csv(\"input-data/sample_table.csv\") %>%\n  # unite(SAMPLE, Sample, Replicate, sep = \"_\", remove = FALSE) %>% \n  # select(RUN = SRR, everything()) %>% \n  # right_join(metadata_tmp)\n\n# write.csv(sample_metadata, file = \"input-data/sample-metadata.csv\")\nsample_metadata_1 <- read.csv(\"input-data/sample-metadata.csv\")\nsample_metadata <- sample_metadata_1 %>% \n  mutate(SAMPLE_MATCH = sub(\"_[^_]+$\", \"\", SAMPLE))"
  },
  {
    "objectID": "metat-analysis.html#taxonomic-level-curation-and-estimate-relative-abundance",
    "href": "metat-analysis.html#taxonomic-level-curation-and-estimate-relative-abundance",
    "title": "Analysis of metatranscriptome data",
    "section": "Taxonomic level curation and estimate relative abundance",
    "text": "Taxonomic level curation and estimate relative abundance\nTaxa curation 3) Average across replicates (or how should replicates be considered) 4) Sum to each sample"
  },
  {
    "objectID": "metat-analysis.html#taxonomy-bar-plot",
    "href": "metat-analysis.html#taxonomy-bar-plot",
    "title": "Analysis of metatranscriptome data",
    "section": "Taxonomy bar plot",
    "text": "Taxonomy bar plot\n\nbar plot of relative TPM? CPM? for major taxnomic groups Keep ALOHA July and April separate, ALOHA on the left side and on the right side, all CA sites. Also place “sun” emoji for samples that are within the euphotic zone"
  },
  {
    "objectID": "metat-analysis.html#pcoa-with-whole-community-functional-profile",
    "href": "metat-analysis.html#pcoa-with-whole-community-functional-profile",
    "title": "Analysis of metatranscriptome data",
    "section": "PCoA with whole community functional profile",
    "text": "PCoA with whole community functional profile\nAhead of time, normalized community composition data was center scaled. Below, we can import this dataset and perform principle component analysis.\nImport normalized center data.\n\n# Run on HPC\nload(\"normed_center_df_08222023.RData\", verbose = TRUE)\n\n\n# Run on HPC\npca_lr <- prcomp(as.data.frame(t(df_ctr_norm)))\nvariance_lr <- (pca_lr$sdev^2)/sum(pca_lr$sdev^2)\n\nImport PCA objects from running R on the HPC.\n\nload(\"input-data/pca_objects.RData\", verbose = TRUE)\n\nLoading objects:\n  pca_df\n  variance_lr\n\n\nDetermine how appropriate the PCoA is in 2 vs 3 dimensions.\n\nbarplot(variance_lr, main = \"Log-Ratio PCA Screeplot\", xlab = \"PC Axis\", ylab = \"% Variance\", cex.names = 1.5, cex.axis = 1.5, cex.lab = 1.5, cex.main = 1.5)\n\n\n\n\n\npc1 <- round(variance_lr[1] * 100, 2)\npc2 <- round(variance_lr[2] * 100, 2)\n# head(sample_metadata)\n# svg(\"Rplot_metat_pca_wholecommunity.svg\", width = 7, height = 7)\npca_df %>% \n  left_join(sample_metadata, by = c(\"SAMPLE_MATCH\" = \"SAMPLE\")) %>%\n  mutate(REGION_ORDER = case_when(REGION == \"ALOHA\" ~ paste(\"ALOHA\", MONTH), TRUE ~ REGION)) %>% \n  ggplot(aes(x = PC1, y = PC2)) +\n    geom_jitter(stroke = 1, size = 4, aes(shape = REGION_ORDER, fill = DEPTH_CATEGORY, color = LIGHT)) +\n    # scale_shape_manual(values = c(21, 22, 23, 24)) +\n    scale_shape_manual(values = c(24, 25, 23, 22, 21)) +\n    scale_fill_manual(values = c(\"#6a51a3\", \"#f768a1\", \"#8c96c6\", \"#fd8d3c\", \"#238b45\")) +\n    scale_color_manual(values = c(\"#cccccc\", \"#252525\")) +\n    theme_linedraw() + coord_fixed(ratio = 1) +\n    guides(fill = guide_legend(override.aes = list(shape = c(22)))) +\n    geom_hline(yintercept = 0) + geom_vline(xintercept = 0) +\n    theme(legend.title = element_blank(),\n          axis.text = element_text(color = \"black\", face = \"bold\", size = 13)) +\n    labs(x =  paste(pc1, \"%\"), y = paste(pc2, \"%\"))"
  },
  {
    "objectID": "metat-analysis.html#define-each-site-by-module",
    "href": "metat-analysis.html#define-each-site-by-module",
    "title": "Analysis of metatranscriptome data",
    "section": "Define each site by module",
    "text": "Define each site by module\n(k-means?)"
  },
  {
    "objectID": "metat-analysis.html#pcoa-with-curated-functional-profiles-and-known-taxonomic-ids.",
    "href": "metat-analysis.html#pcoa-with-curated-functional-profiles-and-known-taxonomic-ids.",
    "title": "Analysis of metatranscriptome data",
    "section": "PCoA with curated functional profiles and known taxonomic IDs.",
    "text": "PCoA with curated functional profiles and known taxonomic IDs.\n(subset this way to increase confidence?)\n\nHeterotrophy\nIsolate and sum to pathways associated with heterotrophy. Gene level is likely too much. Determine for each\n\nHow varied are the transcriptional signatures related to heterotrophy among protists?\n\nUse flag/half square heatmap, where top half shows the percent number of genes and bottom half shows the TPM summary.\n\n\nN & P metabolism\nIsolate at individual gene level for N & P pathways. Show TPM across sites and core taxa\n\nFor ecologically-important phytoplankton at ALOHA and coastal CA, what is the relative importance of nutrient profiles? nutrient utilization?\n\nPlot heat map for each taxa. Show all N and P relevant genes on the x axis and y axis should have all samples.\n\n\nDetermine statistical significance\nEstimate statistical significance for N&P genes, pairwise comparisons. Then add a column for each gene ID that lists the number of samples that are statistically different."
  },
  {
    "objectID": "index.html#study-sites",
    "href": "index.html#study-sites",
    "title": "Metatranscriptome survey of Pacific Ocean",
    "section": "Study sites",
    "text": "Study sites\n\nSPOT, POLA, Catalina\nALOHA"
  },
  {
    "objectID": "index.html#sequencing-information",
    "href": "index.html#sequencing-information",
    "title": "Metatranscriptome survey of Pacific Ocean",
    "section": "Sequencing information",
    "text": "Sequencing information"
  },
  {
    "objectID": "index.html#eukrhythmic",
    "href": "index.html#eukrhythmic",
    "title": "Metatranscriptome survey of Pacific Ocean",
    "section": "eukrhythmic",
    "text": "eukrhythmic"
  },
  {
    "objectID": "index.html#summary-of-analysis",
    "href": "index.html#summary-of-analysis",
    "title": "Metatranscriptome survey of Pacific Ocean",
    "section": "Summary of analysis",
    "text": "Summary of analysis"
  },
  {
    "objectID": "process-eukrhythmic-output.html",
    "href": "process-eukrhythmic-output.html",
    "title": "eukrhythmic compilation",
    "section": "",
    "text": "List of output directories:\nfinal-files/\n\n00-nucleotide_assembly/\n\nMAD.filtered.nospace.fasta: Full length sequences of merged assembly groups (MAD) that have been de-duplicated\n\n01-predicted_proteins/\n\nMAD.fasta.transdecoder.cds: Identified coding regions of transcripts from the Merged assembly groups (MAD)\nMAD.fasta.transdecoder.pep: Translated peptide sequences from the Merged assembly groups (MAD)\n\n02-annotation_table/\n\nTaxonomicAndFunctionalAnnotations.csv: Taxonomic levels, GOs, PFAMs, and KEGG KOs - assigned by short seq ID and the full sequence ID.\n\n03-abundance_tables/\n\nSeqID_Dict_NoSpaceNames.csv: key to link long sequence read IDs to ShortSeq IDs that will link to taxonomic and functional annotations\n\n\nintermediate-files/\n\n04-compare\n\n14-MAD-mapping-filtered: location of individual salmon outputs for all samples (quant.sf)\n\n\n\n\ncollate-results.py: description of code\n~Arianna - how do you want to handle this?~\n\nNotes for Sarah & Arianna: hopefully we can include a description of taking outputs from eukrhythmic and putting them in specific directories, etc. that can go stright into the run_tximport.R below."
  },
  {
    "objectID": "process-eukrhythmic-output.html#import-metadata",
    "href": "process-eukrhythmic-output.html#import-metadata",
    "title": "eukrhythmic compilation",
    "section": "Import metadata",
    "text": "Import metadata\n\ntic()\nmetadata <- fread(\"input-data/complete-sample-list.txt\", \n                 # verbose = TRUE,\n                 showProgress = TRUE,\n                 nThread = num_threads,\n                 header = TRUE)\ntoc() # 0.042 sec elapsed\n\n\nhead(metadata)\n\n# Order of current names of table\nsrr_order <- data.frame(RUN = (names(counts_all)[2:44]))\n\n# set re-name from metadata, include RUN srr IDs\nsrr_list_rename <- select(metadata, SAMPLENAME, RUN) %>% \n  distinct() %>% \n  unite(SRR_EDGER, SAMPLENAME, RUN, sep = \"-\", remove = FALSE)\n\n# Re-order these based on table\njoined_reorder <- srr_order %>% \n  left_join(srr_list_rename)\n\n# All should be equal to TRUE\nsrr_order == as.character(joined_reorder$RUN)\n\n# Set new names\nsrr_rename <- as.character(joined_reorder$SRR_EDGER)\n\nRename counts table\n\n# srr_rename\nnames(counts_all)\ncolnames(counts_all)[2:44] <- srr_rename\nnames(counts_all)\n\n\nQC read counts with what is annotated\nWhat sequences were not annotated? Remove them from the data.\n\n# ID seqID associated \nhead(counts_all$ShortSeqID) # There are more of these here, than was annotated\n\n# What is total number of ShortSeqIDs?\ntic()\nlength(unique(counts_all$ShortSeqID)); toc()\n# 54,080,665\n\nThere are over 54 million hits of read on contigs.\n\n# head(annot_all)\ntic()\nlength(unique(annot_all$ShortSeqID)); toc() #14,737,135 # 14 million with annotations\n\ntic()\nlength(unique(annot_all$SequenceID)); toc()\n# 14840771 - 14737135\n# 103,636 equate to duplicated ORFs\n\nOf these reads, only 14 million had an annotation. This is 27% of the reads that will be used in downstream analysis.\n\n100*(14840771/54080665)\n\n\n\nRemove unannotated.\n\nseqIDs_wannot <- as.character(unique(annot_all$ShortSeqID))\n\n# Save unannotated\nunannot_counts <- counts_all %>% \n  filter(!(ShortSeqID %in% seqIDs_wannot))\n\ncounts_annot <- counts_all %>% \n  filter(ShortSeqID %in% seqIDs_wannot)\n\nNew counts table.\n\ndim(counts_annot)"
  },
  {
    "objectID": "process-eukrhythmic-output.html#edger",
    "href": "process-eukrhythmic-output.html#edger",
    "title": "eukrhythmic compilation",
    "section": "EdgeR",
    "text": "EdgeR\nPrep matrix of counts\n\nhead(all_counts_matrix)\ny <- dim(all_counts_matrix)[2]\ny # should be 43\n# ?DGEList()\n\n# annot_genes <- annot_all %>% \n  # distinct()\n  # column_to_rownames(var = \"ShortSeqID\")\n# dim(annot_all)\n# dim(annot_genes)\n\n\ntic()\ndge_obj_spot_aloha <- DGEList(counts = all_counts_df,\n                              group = c(rep(\"CA_Catalina_5_May\",6),\n          rep(\"CA_PortofLA_5_May\",6),\n          rep(\"CA_SPOT_150_May\",3),\n          rep(\"CA_SPOT_5_May\",12),\n          rep(\"CA_SPOT_890_May\",4),\n          rep(\"NPSG_ALOHA_1000_July\",1),\n          rep(\"NPSG_ALOHA_1000_March\",1),\n          rep(\"NPSG_ALOHA_119_July\",2),\n          rep(\"NPSG_ALOHA_120_March\",2),\n          rep(\"NPSG_ALOHA_150_July\",1),\n          rep(\"NPSG_ALOHA_150_March\",1),\n          rep(\"NPSG_ALOHA_5_July\",2),\n          rep(\"NPSG_ALOHA_5_March\",2)))\ntoc()\n\n\ndge_obj_spot_aloha$samples\n\ntic()\ndata_tmm <- calcNormFactors(dge_obj_spot_aloha, method=\"TMM\") # TMM normalization\ntoc() # 1290.48 sec elapsed\n\nclass(data_tmm)\n# save(data_tmm, file = \"../../../scratch/user/skhu/SPOT-ALOHA/tmm.RData\")\n\n\nCheckpoint to load TMM data\n\nload(file = \"../../../scratch/user/skhu/SPOT-ALOHA/tmm.RData\", verbose = TRUE)\n\ndata_tmm$samples\n\nGet CPM using normalized library size.\n\ndata_tpm_cpm <- cpm(data_tmm, normalized.lib.sizes = TRUE, log = FALSE)\nclass(data_tpm_cpm) ## outputs a matrix array\n\nhead(data_tpm_cpm)[1:4]\n# Transpose\ntmp <- t(data_tpm_cpm)\nhead(tmp)[,1:2]"
  },
  {
    "objectID": "process-eukrhythmic-output.html#subset-for-test-data",
    "href": "process-eukrhythmic-output.html#subset-for-test-data",
    "title": "eukrhythmic compilation",
    "section": "SUBSET for test data",
    "text": "SUBSET for test data\n\n# dim(tmp)\n# # 14,841,331 # 14 million\n# \nsubset_tmp <- tmp[,1:1000000]\n# class(subset_tmp)\n# head(subset_tmp)[,1:5]\n# \n# # Create a mini one too.\n# mini_subset_tmp <- tmp[,1:10]"
  },
  {
    "objectID": "process-eukrhythmic-output.html#add-metadata",
    "href": "process-eukrhythmic-output.html#add-metadata",
    "title": "eukrhythmic compilation",
    "section": "Add metadata",
    "text": "Add metadata\n\n# ?left_join()\n# metat_cpm_wannot <- metat_cpm %>% \n#   left_join(annot_all, )"
  },
  {
    "objectID": "process-eukrhythmic-output.html#make-tx2gene",
    "href": "process-eukrhythmic-output.html#make-tx2gene",
    "title": "eukrhythmic compilation",
    "section": "Make tx2gene",
    "text": "Make tx2gene\n\n# tic()\n# annot_all <- fread(\"../../../scratch/user/skhu/SPOT-ALOHA/02-annotation_table/TaxonomicAndFunctionalAnnotations.csv\",\n#                  verbose = TRUE,\n#                  showProgress = TRUE,\n#                  nThread = num_threads,\n#                  header = TRUE)\n# toc() # 7.046 sec elapsed\n# ?fread()\n\nDon’t need this\n\n# tx2gene_ko <- annot_all %>%\n#   select(TXNAME = ShortSeqID, GENEID = KEGG_ko)\n# ?tximport()\n\nDon’t need this\n\n# txi_gene <- summarizeToGene(txi_makecounts,\n#                 tx2gene = tx2gene_ko,\n#                 varReduce = FALSE,\n#       ignoreTxVersion = FALSE,\n#       ignoreAfterBar = FALSE,\n#       countsFromAbundance = c(\"no\", \"scaledTPM\", \"lengthScaledTPM\")\n)\n\nDon’t need this\n\n# txi <- tximport(\n#   files = txifiles,\n#   type = \"salmon\",\n#   txIn = TRUE, #Incoming are transcript level\n#   txOut = FALSE, # output transcript-level\n#   countsFromAbundance = c(\"scaledTPM\", # scale to library size\n#                           \"lengthScaledTPM\", # scaled using average transcript length over samples and then library size\n#                           \"dtuScaledTPM\"), # scales using median transcript length among isoforms of a gene, and then library size (requires tx2gene file)\n# )"
  },
  {
    "objectID": "process-eukrhythmic-output.html#stop-here",
    "href": "process-eukrhythmic-output.html#stop-here",
    "title": "eukrhythmic compilation",
    "section": "# STOP HERE",
    "text": "# STOP HERE"
  },
  {
    "objectID": "process-eukrhythmic-output.html#section",
    "href": "process-eukrhythmic-output.html#section",
    "title": "eukrhythmic compilation",
    "section": "",
    "text": "txi_makecounts <- makeCountsFromAbundance(count_metat, tpm_metat, length_metat, countsFromAbundance = c(\"scaledTPM\", \"lengthScaledTPM\"))\n\nImport metadata.\n\nmetadata <- fread(\"input-data/complete-sample-list.txt\", \n                 header = TRUE)\n# class(metadata)\n# View(metadata)\n# head(metadata)\n\nMake sure metadata lines up with input files.\n\n# colData : Rows of colData correspond to columns of countData\n\n# example code:\n# sampleTable <- data.frame(condition = factor(rep(c(\"A\", \"B\"), each = 3)))\n# rownames(sampleTable) <- colnames(txi$counts)\n# dds <- DESeqDataSetFromTximport(txi, sampleTable, ~condition)\n# dds is now ready for DESeq() see DESeq2 vignette"
  },
  {
    "objectID": "process-eukrhythmic-output.html#tximport-step",
    "href": "process-eukrhythmic-output.html#tximport-step",
    "title": "eukrhythmic compilation",
    "section": "tximport step",
    "text": "tximport step\nUse count file, transcript length, and TPM information to obtain length scaled TPM results.\n\ntxi_makecounts <- makeCountsFromAbundance(count_metat, tpm_metat, length_metat, countsFromAbundance = c(\"scaledTPM\", \"lengthScaledTPM\"))"
  },
  {
    "objectID": "process-eukrhythmic-output.html#deseq2-analysis",
    "href": "process-eukrhythmic-output.html#deseq2-analysis",
    "title": "eukrhythmic compilation",
    "section": "DESeq2 analysis",
    "text": "DESeq2 analysis\nFilter low counts\n\n# keep <- rowSums(counts(dds)) >= 10\n# dds <- dds[keep,]\n\nSet factor levels?\n\n# dds$condition <- factor(dds$condition, levels = c(\"untreated\",\"treated\"))\n\n\nDifferential expression analysis\nResults tables are generated using the function results, which extracts a results table with log2 fold changes, p values and adjusted p values. With no additional arguments to results, the log2 fold change and Wald test p value will be for the last variable in the design formula, and if this is a factor, the comparison will be the last level of this variable over the reference level (see previous note on factor levels). However, the order of the variables of the design do not matter so long as the user specifies the comparison to build a results table for, using the name or contrast arguments of results.\nDetails about the comparison are printed to the console, directly above the results table. The text, condition treated vs untreated, tells you that the estimates are of the logarithmic fold change log2(treated/untreated).\nImport all data types, only select 100 rows though.\n\n# Count data, compiled from salmon output\ncount_metat <- fread(\"/vortexfs1/omics/alexander/data/Hu-2022-ALOHA-SPOT/Hu_et_al_2022_eukrhythmic/intermediate-files/salmon_reads_file_coordinated_1June.csv\",\n                     verbose = TRUE,\n                     showProgress = TRUE,\n                     nThread = num_threads,\n                     header = TRUE,\n                     nrow = 1000,\n                     sep = \",\",\n                     colClasses = NULL)\n\n# TPM information from salmon\ntpm_metat <- fread(\"/vortexfs1/omics/alexander/data/Hu-2022-ALOHA-SPOT/Hu_et_al_2022_eukrhythmic/intermediate-files/salmon_tpm_file_coordinated_1June.csv\",\n                   verbose = TRUE,\n                   showProgress = TRUE,\n                   nThread = num_threads,\n                   header = TRUE,\n                   nrow = 1000,\n                   sep = \",\",\n                   colClasses = NULL)\n\n# Transcript length\nlength_metat <- fread(\"/vortexfs1/omics/alexander/data/Hu-2022-ALOHA-SPOT/Hu_et_al_2022_eukrhythmic/intermediate-files/salmon_length_file_coordinated_1June.csv\",\n                      verbose = TRUE,\n                      showProgress = TRUE,\n                      nThread = num_threads,\n                      header = TRUE,\n                      nrow = 1000,\n                      sep = \",\", colClasses = NULL)"
  },
  {
    "objectID": "process-eukrhythmic-output.html#process-test-data-in-tximport",
    "href": "process-eukrhythmic-output.html#process-test-data-in-tximport",
    "title": "eukrhythmic compilation",
    "section": "Process test data in tximport",
    "text": "Process test data in tximport\n\nlength_metat$V1 <- NULL\ntpm_metat$V1 <- NULL\ncount_metat$V1 <- NULL\n\nrownames(length_metat) <- length_metat$ShortSeqID\nrownames(tpm_metat) <- tpm_metat$ShortSeqID\nrownames(count_metat) <- count_metat$ShortSeqID\n#\nlength_metat$ShortSeqID <- NULL\ntpm_metat$ShortSeqID <- NULL\ncount_metat$ShortSeqID <- NULL\n#\ntxi_makecounts <- makeCountsFromAbundance(count_metat, tpm_metat, length_metat, countsFromAbundance = c(\"scaledTPM\", \"lengthScaledTPM\"))\n\nmetadata <- fread(\"complete-sample-list.txt\", header = TRUE)\n\ntxi_makecounts is a “matrix” and “array”"
  },
  {
    "objectID": "process-eukrhythmic-output.html#deseq2-test-run",
    "href": "process-eukrhythmic-output.html#deseq2-test-run",
    "title": "eukrhythmic compilation",
    "section": "DESeq2 test run",
    "text": "DESeq2 test run\n\ndds_tpm_sample <- DESeqDataSetFromTximport(txi_makecounts,\n                                           colData = metadata,\n                                           design = ~SAMPLENAME)"
  },
  {
    "objectID": "process-eukrhythmic-output.html#set-up-r-environment",
    "href": "process-eukrhythmic-output.html#set-up-r-environment",
    "title": "eukrhythmic compilation",
    "section": "Set up R environment",
    "text": "Set up R environment\nLibrary required to execute code in R\n\n## Installations\n# if (!require(\"BiocManager\", quietly = TRUE))\n#     install.packages(\"BiocManager\")\n# BiocManager::install(\"DESeq2\")\n# BiocManager::install(\"tximport\")\n\nLoad necessary libraries & get number of available threads for data.table.\n\n# | message: false\n# | warning: false\nlibrary(data.table)\nlibrary(tidyr)\nlibrary(dplyr)\nlibrary(tximport)\nlibrary(readr)\n\nnum_threads <- getDTthreads()\n# Conflicts between tidyverse and data.table can be ignored\n\nOutput files fromrun_tximport.R provide an RData file that can be used for the DESeq input file (tximport_metaT-ALOHA-CA.Rdata)."
  },
  {
    "objectID": "process-eukrhythmic-output.html#import-to-deseq",
    "href": "process-eukrhythmic-output.html#import-to-deseq",
    "title": "eukrhythmic compilation",
    "section": "Import to DESeq",
    "text": "Import to DESeq\nFor this specific project, we needed to run this R script using a large memory node. We recommend testing it on a subset of data to estimate how much memory you will need. We used a >280GB memory node.\nR script containing code below is also available r-tximport.R\nExample on HPC:\n\nmodule load R/4.3\nRscript r-tximport-061523.R\n\n\nr-tximport.R\n\nlibrary(tidyverse)\nlibrary(tximport)\nlibrary(data.table)\nnum_threads <- getDTthreads()\n\n# Identify location of all \"quant.sf\" files that are output from salmon.\nfiles <- Sys.glob(\"/../../../../intermediate-files/04-compare/14-MAD-mapping-filtered/salmon_sample/*quant/quant.sf\")\n\nRead in or create a sample_table R object.\n\nsample_table <- read.csv(\"input-data/sample_table.csv\")\n\nCombine with list of files, make sure order of files remains.\n\nsample_merged <- data.frame(\"Files\"=files) %>% \n  tidyr::separate(Files,sep=\"salmon_sample/\",into=c(\"Stem\",\"Name\")) %>%\n  tidyr::separate(Name,sep=\"_quant\",into=c(\"SName\",\"Extra\")) %>% \n  dplyr::select(SName) %>%\n  dplyr::left_join(sample_table,by=c(\"SName\"=\"SRR\")) %>%\n  tidyr::unite(\"Sample_rep\", Sample, Replicate, sep = \"_\", remove = FALSE)\n\nnames(files) <- sample_merged$Sample_rep\n\nImport and create the tx2gene object for tximport. tx2gene shows which transcripts belong to which genes for the downstream gene-level inference. Make sure the first colume of tx2gene includes meaningful sequence ID names.\n\ntx2gene <- data.frame(\n  fread(\"/../../../../final-files/03-abundance_tables/SeqID_Dict_NoSpaceNames.csv\", verbose = TRUE, showProgress = TRUE, \n        nThread = num_threads, header = TRUE, colClasses = NULL))\n\ntx2gene$V1 <- NULL\n\nRun tximport. Here, we are importing each salmon file (quant.sf) so tximport can read in the transcript-level abundance, estimated counts, and transcript lengths. This is the most memory intensive step.\n\ntxi <- tximport(files, type = \"salmon\", tx2gene = tx2gene)\n\nCreate a sample metadata table that is, again, in the same order.\n\nmetadata <- read_delim(\"input-data/complete-sample-list.txt\", delim = \",\")\n\nsample_merged <- left_join(sample_merged, metadata, by = c(\"SName\" = \"RUN\"))\n\nwrite_delim(sample_merged, file = \"input-data/sample_merged_txi.txt\")\n\nSet rownames and colnames to the same list of samples.\n\nsample_merged <- read_delim(\"input-data/sample_merged_txi.txt\")\nrownames(sample_merged) <- sample_merged$Sample_rep\nrownames(sample_merged) <- colnames(txi$counts)\n\nImport as DESeq object from tximport.\nWe dont have a control. DESeq will automatically find a control in your levels or list for the design. THere is a way for DESeq toignore this need for a control.\n\nlibrary(DESeq2)\n# colData : Rows of colData correspond to columns of countData\n# design ~ x == serves the purpose of considering biological replicates\n\ndds_tpm <- DESeqDataSetFromTximport(txi,\n                                    colData = sample_merged,\n                                    design = ~0 + SAMPLENAME)\n\nsave(dds_tpm, file = \"/vortexfs1/scratch/sarahhu/dds_tpm.RData\")"
  },
  {
    "objectID": "process-eukrhythmic-output.html#options-in-deseq-to-expore",
    "href": "process-eukrhythmic-output.html#options-in-deseq-to-expore",
    "title": "eukrhythmic compilation",
    "section": "Options in DESeq to expore:",
    "text": "Options in DESeq to expore:\nFilter low counts\n\n# keep <- rowSums(counts(dds)) >= 10\n# dds <- dds[keep,]\n\nSet factor levels?\n\n# dds$condition <- factor(dds$condition, levels = c(\"untreated\",\"treated\"))\n\n\nDifferential expression analysis\nResults tables are generated using the function results, which extracts a results table with log2 fold changes, p values and adjusted p values. With no additional arguments to results, the log2 fold change and Wald test p value will be for the last variable in the design formula, and if this is a factor, the comparison will be the last level of this variable over the reference level (see previous note on factor levels). However, the order of the variables of the design do not matter so long as the user specifies the comparison to build a results table for, using the name or contrast arguments of results.\nDetails about the comparison are printed to the console, directly above the results table. The text, condition treated vs untreated, tells you that the estimates are of the logarithmic fold change log2(treated/untreated).\n\n# dds$condition <- factor(dds$condition, levels = c(\"untreated\",\"treated\"))\n\n\n# dds$SAMPLENAME <- factor() # but this is only for a comparison across two?\n\n# For light and NPSG vs CA...\n# LIGHT + REGION\ndds$LIGHT <- relevel(dds$LIGHT, ref = \"Sub-euphotic\")\ndds$PACIFIC_REGION <- relevel(dds$PACIFIC_REGION, ref = \"CA\")\n# head(metadata)\n\n\n# res <- results(dds, name=\"condition_treated_vs_untreated\")\n# res <- results(dds, contrast=c(\"condition\",\"treated\",\"untreated\"))\n\n\n# dds <- DESeq(dds)\n# \n# res <- results(dds)\n# res\n\nOutput from res: rownames is the gene ID baseMean:average expression level across all samples, normalized by sequencing depth lg2foldchange, of treated vs. untreated padj, adjusted p-value, p-value corrected for multiple testing\nThe text, “condition treated vs untreated”, tells you that the estimates are of the logarithmic fold change log2(treated/untreated).\n\n\nQC read counts with what is annotated\nWhat sequences were not annotated? Remove them from the data.\n\n# ID seqID associated \nhead(counts_all$ShortSeqID) # There are more of these here, than was annotated\n\n# What is total number of ShortSeqIDs?\ntic()\nlength(unique(counts_all$ShortSeqID)); toc()\n# 54,080,665\n\nThere are over 54 million hits of read on contigs.\n\n# head(annot_all)\ntic()\nlength(unique(annot_all$ShortSeqID)); toc() #14,737,135 # 14 million with annotations\n\ntic()\nlength(unique(annot_all$SequenceID)); toc()\n# 14840771 - 14737135\n# 103,636 equate to duplicated ORFs\n\nOf these reads, only 14 million had an annotation. This is 27% of the reads that will be used in downstream analysis.\n\n100*(14840771/54080665)\n\n\n\nRemove unannotated.\n\nseqIDs_wannot <- as.character(unique(annot_all$ShortSeqID))\n\n# Save unannotated\nunannot_counts <- counts_all %>% \n  filter(!(ShortSeqID %in% seqIDs_wannot))\n\ncounts_annot <- counts_all %>% \n  filter(ShortSeqID %in% seqIDs_wannot)\n\nNew counts table.\n\ndim(counts_annot)"
  },
  {
    "objectID": "process-eukrhythmic-output.html#compilation-scripts",
    "href": "process-eukrhythmic-output.html#compilation-scripts",
    "title": "eukrhythmic compilation",
    "section": "",
    "text": "collate-results.py: description of code\n~Arianna - how do you want to handle this?~"
  },
  {
    "objectID": "process-eukrhythmic-output.html#by-sample-name",
    "href": "process-eukrhythmic-output.html#by-sample-name",
    "title": "eukrhythmic compilation",
    "section": "By sample name",
    "text": "By sample name\nFor taxonomic bar plot and overall cluster analysis. (March and July are separate at ALOHA)\nSee how to set up subsetting? https://github.com/WHOIGit/super-waffle/blob/main/01_seqpain_deseq.R\n\nds_tpm_samplename <- DESeqDataSetFromTximport(txi,\n                                    colData = sample_merged,\n                                    design = ~0 + SAMPLENAME)\n\noptional\n\nkeep <- rowSums(counts(ds_tpm_samplename)) >= 10\ndds <- ds_tpm_samplename[keep,]\n\ndds includes > 10. Now dim is 6972094, it was originally, 14737135. Keeping about 47% of data."
  },
  {
    "objectID": "process-eukrhythmic-output.html#extract-count-table",
    "href": "process-eukrhythmic-output.html#extract-count-table",
    "title": "eukrhythmic compilation",
    "section": "Extract count table",
    "text": "Extract count table\n\nlibrary(tximport)\n\ncounts_scaled <- makeCountsFromAbundance(\n  as.matrix(txi$counts),\n  as.matrix(txi$abundance),\n  as.matrix(txi$length),\n  countsFromAbundance = \"scaledTPM\"\n)\n\ncounts_df <- as.data.frame(counts_scaled)\n\nRename so replicates have the same name for counts\n\nnames_orig <- colnames(counts_df)\nnames_new <- sub(\"_[^_]+$\", \"\", names_orig)\ncolnames(counts_df) <- names_new\n\nMean across columns that have the same name - which are replicates.\n\nmean_counts_df <- counts_df %>%\n  cbind(as.list(.) %>%\n    Filter(is.numeric, .) %>%\n    split(names(.)) %>%\n    lapply(as.data.frame) %>%\n    lapply(rowMeans) %>%\n    setNames(paste0(\"mean.\", names(.)))) %>% \n  select(starts_with(\"mean\"))\n\n\nsave(mean_counts_df, sample_merged, file = \"Avg_scaled_tpm_08222023.RData\")"
  },
  {
    "objectID": "process-eukrhythmic-output.html#extract-centered-data",
    "href": "process-eukrhythmic-output.html#extract-centered-data",
    "title": "eukrhythmic compilation",
    "section": "Extract centered data",
    "text": "Extract centered data\nSee “Count data transformations” in https://introtogenomics.readthedocs.io/en/latest/2021.11.11.DeseqTutorial.html\nUse variance Stabilizing Transformation (vst) command to estimate dispersion.\n\n# output is a DESeqtransform object\nvsd_all <- vst(ds_tpm_samplename)\n\n# make a transformed count matrix\n# vsd_blind <- vst(ds_tpm_samplename, blind = FALSE)\n\nExample output: > using ‘avgTxLength’ from assays(dds), correcting for library size\nLook at output with assay.\n\nhead(assay(vsd_all), 4)\n\nExtract as a data frame, where values are center normalized - based on avgTxLength.\n\ndf_ctr_norm <- as.data.frame(assay(vsd_all))\n\n\nsave(df_ctr_norm, file = \"normed_center_df_08222023.RData\")"
  },
  {
    "objectID": "process-eukrhythmic-output.html#euphotic-vs.-subeuphotic-overall",
    "href": "process-eukrhythmic-output.html#euphotic-vs.-subeuphotic-overall",
    "title": "eukrhythmic compilation",
    "section": "Euphotic vs. subeuphotic overall",
    "text": "Euphotic vs. subeuphotic overall\n\n# Subset txi\ntxi_npsg &lt;- subsetTxi(txi, npsg_only, genes_tax_fxn_all)\ntmp_sample_merged &lt;- sample_merged %&gt;% \n  filter(Sample_rep %in% as.character(npsg_only$sample))\nrownames(tmp_sample_merged) &lt;- tmp_sample_merged$Sample_rep\nrownames(tmp_sample_merged) &lt;- colnames(txi_npsg$counts)\n\nds_tpm_npsg_light &lt;- DESeqDataSetFromTximport(txi_npsg,\n                                              colData = tmp_sample_merged,\n                                              design = ~0 + LIGHT)\n\nds_tpm_npsg_month &lt;- DESeqDataSetFromTximport(txi_npsg,\n                                              colData = tmp_sample_merged,\n                                              design = ~0 + MONTH)\n\nsave(ds_tpm_npsg_light, ds_tpm_npsg_month, file = \"/vortexfs1/scratch/sarahhu/txi-objs-metaT/npsg-deseq.RData\")\n\n\ntxi_ca &lt;- subsetTxi(txi, ca_only, genes_tax_fxn_all)\n\ntmp_sample_merged &lt;- sample_merged %&gt;% \n  filter(Sample_rep %in% as.character(ca_only$sample))\nrownames(tmp_sample_merged) &lt;- tmp_sample_merged$Sample_rep\nrownames(tmp_sample_merged) &lt;- colnames(txi_ca$counts)\n\nds_tpm_ca_light &lt;- DESeqDataSetFromTximport(txi_ca,\n                                              colData = tmp_sample_merged,\n                                              design = ~0 + LIGHT)\n\nsave(ds_tpm_ca_light, file = \"/vortexfs1/scratch/sarahhu/txi-objs-metaT/ca-deseq.RData\")\n\nsave(txi_npsg, txi_ca, file = \"/vortexfs1/scratch/sarahhu/txi-objs-metaT/station_txi.RData\")\n\nrm(txi_npsg);rm(txi_ca) #Save room\n\n\nEuphotic vs subeuphotic across regions\n\n# Subset txi\ntxi_euph &lt;- subsetTxi(txi, euphotic, genes_tax_fxn_all)\n\ntmp_sample_merged &lt;- sample_merged %&gt;% \n  filter(Sample_rep %in% as.character(euphotic$sample))\nrownames(tmp_sample_merged) &lt;- tmp_sample_merged$Sample_rep\nrownames(tmp_sample_merged) &lt;- colnames(txi_euph$counts)\n\nds_tpm_euphotic &lt;- DESeqDataSetFromTximport(txi_euph,\n                                              colData = tmp_sample_merged,\n                                              design = ~0 + PACIFIC_REGION)\n\n\ntxi_subeuph &lt;- subsetTxi(txi, subeuphotic, genes_tax_fxn_all)\n\ntmp_sample_merged &lt;- sample_merged %&gt;% \n  filter(Sample_rep %in% as.character(subeuphotic$sample))\nrownames(tmp_sample_merged) &lt;- tmp_sample_merged$Sample_rep\nrownames(tmp_sample_merged) &lt;- colnames(txi_subeuph$counts)\n\n\nds_tpm_subeuphotic &lt;- DESeqDataSetFromTximport(txi_subeuph,\n                                              colData = tmp_sample_merged,\n                                              design = ~0 + PACIFIC_REGION)\n\nsave(ds_tpm_subeuphotic, ds_tpm_euphotic, file = \"/vortexfs1/scratch/sarahhu/txi-objs-metaT/euphotic-subeuphotic-deseq.RData\")\n\nsave(txi_euph, txi_subeuph, file = \"/vortexfs1/scratch/sarahhu/txi-objs-metaT/light_txi.RData\")"
  },
  {
    "objectID": "process-eukrhythmic-output.html#aloha-vs.-ca-samples",
    "href": "process-eukrhythmic-output.html#aloha-vs.-ca-samples",
    "title": "eukrhythmic compilation",
    "section": "ALOHA vs. CA samples",
    "text": "ALOHA vs. CA samples\n\nALOHA euphotic vs CA euphotic\n\n\nALOHA subeuphotic vs. CA sub-euphotic"
  },
  {
    "objectID": "metat-analysis.html#taxonomic-composition-distribution",
    "href": "metat-analysis.html#taxonomic-composition-distribution",
    "title": "Analysis of metatranscriptome data",
    "section": "Taxonomic composition & distribution",
    "text": "Taxonomic composition & distribution\nEvaluate taxonomic diversity and composition across all sites.\n\n# | echo: true\n# | eval: false\nlength(unique(taxfxn$SequenceID))\n# 14840771\n\nlength(unique(rownames(mean_counts_df)))\n# 14737135\n\n\n# | echo: true\n# | eval: false\nannotated_mean <- dplyr::left_join(mean_counts_df %>%\n                   mutate(SequenceID = rownames(mean_counts_df)),\n                                 taxfxn,\n                                 by = \"SequenceID\")\n# 14737135-14737693\n## 558 were duplicated\n\nRemove the duplicated annotations and make a base taxonomic dataframe for downstream work.\n\n# | echo: true\n# | eval: false\ntax_plot <- annotated_mean %>% \n  select(Domain:Species, starts_with(\"mean\"), SequenceID) %>% \n  distinct()\n# dim(tax_plot) #14737624\\\n\n\n# | echo: true\n# | eval: false\nload(\"input-data/tax_plot_08222023.RData\", verbose = TRUE)\n\n\n# | echo: true\n# | eval: false\ntax_only <- tax_plot %>% \n  select(-SequenceID) %>% \n  pivot_longer(cols = starts_with(\"mean\"), names_to = \"SAMPLE\", values_to = \"scaledTPM\") %>% \n  group_by(SAMPLE, Domain, Supergroup, Phylum, Class, Order, Family, Genus, Species) %>% \n    summarise(SUM_scaledTPM = sum(scaledTPM)) \n\n\nload(\"input-data/tax_only_08242023.RData\", verbose = TRUE)\n\nLoading objects:\n  tax_only\n\n\n\nPlot domain level\nCreating plot to see total number and relative abundance of non-eukaryotic hits in the data.\n\n(tax_only %>%\n  mutate(DOMAIN = str_squish(Domain),\n         SAMPLE = str_remove(SAMPLE, \"mean.\")) %>% \n  group_by(SAMPLE, DOMAIN) %>% \n  summarise(SUM = sum(SUM_scaledTPM)) %>% \n  ggplot(aes(x = SAMPLE, y = SUM, fill = DOMAIN)) +\n    geom_bar(stat = \"identity\", position = \"stack\", color = \"black\")+\n    theme_linedraw() +\n    theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1))) /\n(tax_only %>%\n  mutate(DOMAIN = str_squish(Domain),\n         SAMPLE = str_remove(SAMPLE, \"mean.\")) %>% \n  group_by(SAMPLE, DOMAIN) %>% \n  summarise(SUM = sum(SUM_scaledTPM)) %>% \n  ggplot(aes(x = SAMPLE, y = SUM, fill = DOMAIN)) +\n    geom_bar(stat = \"identity\", position = \"fill\", color = \"black\")+\n    theme_linedraw() +\n    theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)))\n\n`summarise()` has grouped output by 'SAMPLE'. You can override using the\n`.groups` argument.\n`summarise()` has grouped output by 'SAMPLE'. You can override using the\n`.groups` argument.\n\n\n\n\n\nStats on what % of the data are eukaryotic vs. not.\n\nSUM_TOTAL_TPM <- sum(tax_only$SUM_scaledTPM)\ntax_only %>%\n  mutate(DOMAIN = str_squish(Domain),\n         SAMPLE = str_remove(SAMPLE, \"mean.\")) %>% \n  filter(SUM_scaledTPM > 0) %>%  # Remove zeroes\n  group_by(DOMAIN) %>% \n    summarise(Sum_of_TPM = sum(SUM_scaledTPM),\n              Perc_of_total = 100*(Sum_of_TPM/SUM_TOTAL_TPM),\n              .groups = \"rowwise\")\n\n# A tibble: 4 × 3\n# Rowwise:  DOMAIN\n  DOMAIN       Sum_of_TPM Perc_of_total\n  <chr>             <dbl>         <dbl>\n1 Archaea         305556.        0.159 \n2 Bacteria       5438767.        2.84  \n3 Eukaryota    185858173.       96.9   \n4 Unclassified    174159.        0.0908\n\n            # Count = count(DOMAIN))\n\n\n\nPlot to supergroup\n\n# head(tax_only)\ntax_only %>%\n  mutate(DOMAIN = str_squish(Domain),\n         SUPERGROUP = str_squish(Supergroup),\n         PHYLUM = str_squish(Phylum),\n         SAMPLE = str_remove(SAMPLE, \"mean.\")) %>% \n  filter(DOMAIN == \"Eukaryota\") %>% \n  group_by(SAMPLE, Supergroup) %>% \n  summarise(SUM = sum(SUM_scaledTPM)) %>% \n  ggplot(aes(x = SAMPLE, y = SUM, fill = Supergroup)) +\n    geom_bar(stat = \"identity\", position = \"fill\", color = \"black\")+\n    theme_linedraw() +\n    theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1))\n\n`summarise()` has grouped output by 'SAMPLE'. You can override using the\n`.groups` argument.\n\n\n\n\n\nTally composition of the supergroup.\n\ncolnames(tax_only)\n\n [1] \"SAMPLE\"        \"Domain\"        \"Supergroup\"    \"Phylum\"       \n [5] \"Class\"         \"Order\"         \"Family\"        \"Genus\"        \n [9] \"Species\"       \"SUM_scaledTPM\"\n\n# unique(tax_only$Phylum)\ntax_names <- tax_only %>%\n  mutate(DOMAIN = str_squish(Domain),\n         SUPERGROUP = str_squish(Supergroup),\n         PHYLUM = str_squish(Phylum),\n         SAMPLE = str_remove(SAMPLE, \"mean.\")) %>% \n  filter(DOMAIN == \"Eukaryota\") %>% \n  select(DOMAIN, SUPERGROUP, Class:Species) %>% \n  distinct()\n\nAdding missing grouping variables: `SAMPLE`, `Domain`, `Supergroup`, `Phylum`\n\nunique(tax_names$Phylum)\n\n [1] \" Apicomplexa\"      \" Ciliophora\"       \" Dinoflagellata\"  \n [4] \" Perkinsea\"        \"Unclassified\"      \" Conosa\"          \n [7] \" Discosea\"         \" Lobosa\"           \" Chlorophyta\"     \n[10] \" Glaucophyta\"      \" Rhodophyta\"       \" Discoba\"         \n[13] \" Cryptophyta\"      \" Hacrobia_X\"       \" Haptophyta\"      \n[16] \" Choanoflagellida\" \" Fungi\"            \" Cercozoa\"        \n[19] \" Foraminifera\"     \" Ochrophyta\"       \" Opalozoa\"        \n[22] \" Sagenista\"        \" Stramenopiles_X\" \n\n\nNow, reformat taxonomic information to visualize.\n\nunique(tax_only$SAMPLE)\n\n [1] \"mean.Catalina\"     \"mean.July_1000m\"   \"mean.July_150m\"   \n [4] \"mean.July_5m\"      \"mean.July_DCM\"     \"mean.March_1000m\" \n [7] \"mean.March_150m\"   \"mean.March_5m\"     \"mean.March_DCM\"   \n[10] \"mean.PortofLA\"     \"mean.SPOT_150m\"    \"mean.SPOT_890m\"   \n[13] \"mean.SPOT_surface\"\n\n# colnames(tax_only)\n# head(sample_metadata)\ntax_formatted <- data.frame(tax_only) %>%\n  # Remove preceding spaces in taxonomic names\n  mutate(across(c(Domain, Supergroup, Phylum, Class, Order, Family, Genus, Species), ~ as.character(str_squish(.)))) %>% \n  filter(Domain == \"Eukaryota\" & SUM_scaledTPM > 0) %>% \n  mutate(SAMPLE_MATCH = str_remove(SAMPLE, \"mean.\")) %>%\n  left_join(sample_metadata, by = \"SAMPLE_MATCH\") %>% \n  # Taxonomic group curation\n  mutate(SUPERGROUP = case_when(\n    Supergroup == \"Alveolata\" ~ paste(Supergroup, Phylum, sep = \"-\"),\n    TRUE ~ Supergroup\n  ))\n\nWarning in left_join(., sample_metadata, by = \"SAMPLE_MATCH\"): Detected an unexpected many-to-many relationship between `x` and `y`.\nℹ Row 1 of `x` matches multiple rows in `y`.\nℹ Row 13 of `y` matches multiple rows in `x`.\nℹ If a many-to-many relationship is expected, set `relationship =\n  \"many-to-many\"` to silence this warning.\n\n# head(tax_formatted)\n\nAssign levels for taxonomic groups.\n\ntax_order_color<-c(\"#612741\",\"#b74a70\",\"#b7757c\",\"#eecfbf\",\"#92462f\",\"#bb603c\",\"#dfa837\",\"#ccc050\",\"#33431e\",\"#93b778\",\"#61ac86\",\"#657abb\",\"#1c1949\",\"#8a8d84\")\nsupergroup_order <- (as.character(unique(tax_formatted$SUPERGROUP)))\nnames(tax_order_color) <- (supergroup_order)\n\n\nFigure 1\n\ntax_formatted %>% \n  mutate(SUPERGROUP = factor(tax_formatted$SUPERGROUP, levels = supergroup_order)) %>% \n  group_by(SAMPLE_ID_PARSED, PACIFIC_REGION, LIGHT, DEPTH, SUPERGROUP) %>% \n  summarise(SUM = sum(SUM_scaledTPM)) %>% \n  ggplot(aes(x = SAMPLE_ID_PARSED, y = SUM, fill = SUPERGROUP)) +\n    geom_bar(stat = \"identity\", position = \"fill\", color = \"black\")+\n    facet_grid(rows = vars(PACIFIC_REGION), scales = \"free_y\", space = \"free\") +\n    scale_fill_manual(values = tax_order_color) +\n    theme_classic() +\n    coord_flip() +\n    theme(axis.text.x = element_text(vjust = 1, hjust = 1)) +\n    labs(x = \"\", y = \"TPM Relative Abundance\")\n\n`summarise()` has grouped output by 'SAMPLE_ID_PARSED', 'PACIFIC_REGION',\n'LIGHT', 'DEPTH'. You can override using the `.groups` argument.\n\n\n\n\n\n\n\nTable 1\nGet stats on what transcripts were annotated to various levels, etc.\nThis represents a toy dataset to troubleshoot code.\n\nload(\"input-data/toy_1000.Rdata\", verbose = TRUE)\n\n# Change to original names, so code below can be written\nannotated_mean <- annotated_mean_10000\ndf_ctr_norm <- ctr_norm_10000\nhead(annotated_mean)\n\n\nHow many transcripts are annotated?\n\n\ndata.frame(annotated_mean %>% \n             count(output = KEGG_ko != \"-\", \n                   name = \"KEGGs\") %>%\n             left_join(annotated_mean %>% \n                     count(output = PFAMs != \"-\", \n                           name = \"PFAMs\")) %>% \n             left_join(annotated_mean %>% \n                     count(output = GOs != \"-\", \n                           name = \"GOs\")) %>% \n             left_join(annotated_mean %>% \n                     count(output = (GOs != \"-\" & PFAMs != \"-\" & KEGG_ko != \"-\"), \n                           name = \"All\"))) %>% \n  filter(output == TRUE) %>% select(-output) %>% \n  pivot_longer(cols = everything(), values_to = \"Number annotated\") %>% \n  mutate(Percent_annotated = 100*(`Number annotated`/length(annotated_mean$SequenceID)))\n\n\n\n\nDB\nNumber of seqs annotated\nPercent annotated\n\n\n\n\n\nKEGGs\n9970784\n67.7\n\n\n\nPFAMs\n13595566\n92.3\n\n\n\nGOs\n5442486\n36.9\n\n\n\nAll\n4963542\n33.7\n\n\n\n\n\nsummary_annotated <- annotated_mean %>%\n  mutate(SUM = rowSums(across(where(is.numeric)))) %>%\n  select(SUM, GOs, PFAMs, KEGG_ko, Domain, Supergroup)\n\n# write.csv(summary_annotated, file = \"summary_of_annotated_totalTPM.csv\")\n# sum(summary_annotated$SUM) # TPM amount that is annotated\n\n\nHow many are annotated and have taxonomic IDs?\n\n\nnoneuk <- c(\"Unclassified\", \"Bacteria\", \"Archaea\")\nas.data.frame(annotated_mean %>% \n             count(output = !(Domain %in% noneuk), \n                   name = \"IDed as Eukaryote\") %>% \n    left_join(annotated_mean %>% \n                     count(output = !(Domain %in% noneuk) & Supergroup != \"Unclassified\", \n                           name = \"Supergroup level\")) %>% \n             left_join(annotated_mean %>% \n                     count(output = !(Domain %in% noneuk) & Class != \"Unclassified\", \n                           name = \"Class level\")) %>% \n             left_join(annotated_mean %>% \n                     count(output = !(Domain %in% noneuk) & Order != \"Unclassified\", \n                           name = \"Order level\")) %>%\n            left_join(annotated_mean %>% \n                     count(output = !(Domain %in% noneuk) & Family != \"Unclassified\", \n                           name = \"Family level\")) %>%\n            left_join(annotated_mean %>% \n                     count(output = !(Domain %in% noneuk) & Genus != \"Unclassified\", \n                           name = \"Genus level\")) %>%\n              left_join(annotated_mean %>% \n                     count(output = !(Domain %in% noneuk) & Species != \"Unclassified\", \n                           name = \"Species level\"))) %>%  \n  filter(output == TRUE) %>% select(-output) %>% \n  pivot_longer(cols = everything(), values_to = \"Number annotated\") %>% \n  mutate(Percent_annotated = 100*(`Number annotated`/length(annotated_mean$SequenceID)))\n\n\nNeed to run the above on the HPC."
  },
  {
    "objectID": "metat-analysis.html#euphotic-and-subeuphotic-only",
    "href": "metat-analysis.html#euphotic-and-subeuphotic-only",
    "title": "Analysis of metatranscriptome data",
    "section": "Euphotic and subeuphotic only",
    "text": "Euphotic and subeuphotic only\nsubeuphotic:in the subeuphotic, upreg in npsg or CA euphotic: in the euphotic only, upreg in NPSG or CA\n\nload(\"/vortexfs1/scratch/sarahhu/txi-objs-metaT/euphotic-subeuphotic-deseq.RData\")\n\n\n# Euphotic\ngroupsize &lt;- 2\nkeep &lt;- rowSums(counts(ds_tpm_euphotic) &gt;= 50) &gt;= groupsize\nds_tpm_light_filtered &lt;- ds_tpm_euphotic[keep,]\n\ndds_obj_filtered$PACIFIC_REGION &lt;- factor(dds_obj_filtered$PACIFIC_REGION, levels = c(\"CA\", \"NPSG\"))\n\n# this step takes time\ndds_light &lt;- DESeq2::DESeq(ds_tpm_light_filtered) \n# report results\nres_euphotic_reg &lt;- results(dds_light)\n\n\n# Subeuphotic\ngroupsize &lt;- 2\nkeep &lt;- rowSums(counts(ds_tpm_subeuphotic) &gt;= 50) &gt;= groupsize\nds_tpm_light_filtered &lt;- ds_tpm_subeuphotic[keep,]\n\ndds_obj_filtered$PACIFIC_REGION &lt;- factor(dds_obj_filtered$PACIFIC_REGION, levels = c(\"CA\", \"NPSG\"))\n\n# this step takes time\ndds_light &lt;- DESeq2::DESeq(ds_tpm_light_filtered) \n# report results\nres_subeuphotic_reg &lt;- results(dds_light)\n\n\nsave(res_subeuphotic_reg, res_euphotic_reg, file = \"DE_results_region_light.RData\")\n\n\nAug 25 ** this is all running on poseidon!\n\n\nBring locally.\n\n# load(\"input-data/DE_results_light.RData\", verbose = TRUE)\n\nGet stats on these outputs.\n\n# summary(res_light)\n# summary(res_pacific)\n# hist(res_pacific$log2FoldChange)\n\n\n# plotMA(res_light)\n# plotMA(res_lightpac)\n# plotMA(res_light_05)"
  },
  {
    "objectID": "process-eukrhythmic-output.html#subseting-txi",
    "href": "process-eukrhythmic-output.html#subseting-txi",
    "title": "eukrhythmic compilation",
    "section": "Subseting txi",
    "text": "Subseting txi\n\nSamples\nUse the metadata data frame to create sample lists for the comparisons we want to do.\n\nmetadata &lt;- read.csv(\"input-data/sample-list-revised.txt\")\n# head(metadata)\n# unique(metadata$REGION)\n\nAs is, we can do LIGHT and PACIFIC_REGION - these are binary.\n\nds_tpm_light &lt;- DESeqDataSetFromTximport(txi,\n                                              colData = sample_merged,\n                                              design = ~0 + LIGHT)\n\nds_tpm_pac &lt;- DESeqDataSetFromTximport(txi,\n                                              colData = sample_merged,\n                                              design = ~0 + PACIFIC_REGION)\n\nds_tpm_lightpac &lt;- DESeqDataSetFromTximport(txi,\n                                              colData = sample_merged,\n                                              design = ~0 + PACIFIC_REGION + LIGHT)\n\nsave(ds_tpm_light, ds_tpm_pac, ds_tpm_lightpac, file = \"light-pacregion-deseq.RData\")\n\nCompare and contrast within regions.\n\nnpsg_only &lt;- metadata %&gt;% \n  filter(PACIFIC_REGION == \"NPSG\") %&gt;% \n  select(sample = SAMPLE)\n# Compare euphotic and subeuphotic\n# Use this to compare across months too\n\nca_only &lt;- metadata %&gt;% \n  filter(PACIFIC_REGION != \"NPSG\") %&gt;% \n  select(sample = SAMPLE)\n# Compare euphotic and subeuphotic\n\nca_coast &lt;- metadata %&gt;% \n  filter(PACIFIC_REGION != \"NPSG\" & REGION != \"SPOT\") %&gt;% \n  select(sample = SAMPLE)\n# compare POLA vs. Catalina\n\nstations_only &lt;- metadata %&gt;% \n  filter(REGION == \"SPOT\" | REGION == \"ALOHA\") %&gt;% \n  select(sample = SAMPLE)\n# compare SPOT vs. ALOHA as is\n\neuphotic &lt;- metadata %&gt;% \n  filter(LIGHT == \"Euphotic\")%&gt;% \n  select(sample = SAMPLE)\n# Compare NPSG to CA euphotic zone\n\nsubeuphotic &lt;- metadata %&gt;% \n  filter(LIGHT != \"Euphotic\")%&gt;% \n  select(sample = SAMPLE)\n# Compare NPSG to CA subeuphotic zone\n\n\n\nGenes\nNeed to make a list of the SequenceID from the taxonomy and functional annotations.\n\ntaxfxn &lt;- read.csv(\"TaxonomicAndFunctionalAnnotations.csv\")\n\nR objects that are character lists will be most useful.\n\n# Get list of annotations where a GO, PFAM, and KEGG ID were assigned.\ngenes_fxn_all &lt;- as.character(\n  filter(taxfxn, GOs != \"-\" & PFAMs != \"-\" & KEGG_ko != \"-\") %&gt;% \n    select(SequenceID) %&gt;% \n    .[[\"SequenceID\"]]) #this line outputs the selected vector from the pipe\n\n# Removing unclassified and unannotated sequences\ngenes_tax_fxn_all &lt;- as.character(\n  filter(taxfxn, GOs != \"-\" & PFAMs != \"-\" & KEGG_ko != \"-\"\n         & Domain == \"Eukaryota\" & Supergroup != \"Unclassified\") %&gt;% \n    select(SequenceID) %&gt;% \n    .[[\"SequenceID\"]])\n\nFrom KEGG database reformatting, extract this Robject, key_geneid\n\n# head(key_geneid)\nkegg_keep &lt;- as.character(key_geneid %&gt;% \n  filter(Category01 != \"\" & !(is.na(Category01))) %&gt;% \n  select(KEGG) %&gt;% \n  .[[\"KEGG\"]])\n \nlength(kegg_keep)\n\ngenes_kegg_curated &lt;- as.character(taxfxn %&gt;%\n    mutate(KEGG_mod = str_remove_all(KEGG_ko, \"ko:\")) %&gt;% \n    filter(KEGG_mod %in% kegg_keep) %&gt;% \n    select(SequenceID) %&gt;% \n    .[[\"SequenceID\"]])\n\nSave objects for subsetting.\n\nsave(genes_fxn_all, genes_tax_fxn_all, key_geneid,\n     npsg_only, ca_only, ca_coast, stations_only, euphotic, subeuphotic,\n     file = \"sample-gene-lists_TXISUBSET.RData\")\n\n\n\nFunction\n\n# Subset txi directly\nsubsetTxi &lt;- function(txi, samples, include_genes=rownames(txi$counts))\n  {\n  genes &lt;- rownames(txi$counts)[rownames(txi$counts) %in% include_genes]\n  txi$abundance &lt;- txi$abundance[genes, samples$sample]\n  txi$counts &lt;- txi$counts[genes, samples$sample]\n  txi$length &lt;- txi$length[genes, samples$sample]\n  return(txi)\n  }\n\n# Example usage \n# tmp &lt;- sample(taxfxn$SequenceID,10,replace = FALSE)\n# pola &lt;- data.frame(sample = c(\"PortofLA_1\", \"PortofLA_2\"))\n# txi_pola &lt;- subsetTxi(txi, pola, tmp)"
  },
  {
    "objectID": "process-eukrhythmic-output.html#subset-to-genes-of-interest-only",
    "href": "process-eukrhythmic-output.html#subset-to-genes-of-interest-only",
    "title": "eukrhythmic compilation",
    "section": "Subset to genes of interest only",
    "text": "Subset to genes of interest only\n\ntaxfxn &lt;- read.csv(\"TaxonomicAndFunctionalAnnotations.csv\")\n\n\nlibrary(tximport)\nlibrary(tidyverse)\n\n\nall_samples &lt;- metadata %&gt;% \n  select(sample = SAMPLE)\n\ntxi_curated &lt;- subsetTxi(txi, all_samples, genes_kegg_curated)\n\n\ncounts_scaled_curated &lt;- makeCountsFromAbundance(\n  as.matrix(txi_curated$counts),\n  as.matrix(txi_curated$abundance),\n  as.matrix(txi_curated$length),\n  countsFromAbundance = \"scaledTPM\"\n)\n\ncounts_df_curated &lt;- as.data.frame(counts_scaled_curated)\n\nnames_orig &lt;- colnames(counts_df_curated)\nnames_new &lt;- sub(\"_[^_]+$\", \"\", names_orig)\ncolnames(counts_df_curated) &lt;- names_new\n\nmean_counts_df_curated &lt;- counts_df_curated %&gt;%\n  cbind(as.list(.) %&gt;%\n    Filter(is.numeric, .) %&gt;%\n    split(names(.)) %&gt;%\n    lapply(as.data.frame) %&gt;%\n    lapply(rowMeans) %&gt;%\n    setNames(paste0(\"mean.\", names(.)))) %&gt;% \n  select(starts_with(\"mean\"))\n\n\ncounts_curated &lt;- mean_counts_df_curated %&gt;% \n  rownames_to_column(var = \"SequenceID\") %&gt;% \n  left_join(taxfxn)\n\nsave(counts_curated, sample_merged, file = \"Avg_scaled_tpm_curated_08252023.RData\")\n\n\ntmp_sample_merged &lt;- sample_merged %&gt;% \n  filter(Sample_rep %in% as.character(all_samples$sample))\n\nrownames(tmp_sample_merged) &lt;- tmp_sample_merged$Sample_rep\nrownames(tmp_sample_merged) &lt;- colnames(txi_curated$counts)\n\nds_tpm_curated &lt;- DESeqDataSetFromTximport(txi_curated,\n                                    colData = tmp_sample_merged,\n                                    design = ~0 + SAMPLENAME)\n\nvsd_all &lt;- vst(ds_tpm_curated)\n\ndf_ctr_norm_curated &lt;- as.data.frame(assay(vsd_all))\n\nctr_norm_curated &lt;- df_ctr_norm_curated %&gt;% \n  rownames_to_column(var = \"SequenceID\") %&gt;% \n  left_join(taxfxn)\n\n\nsave(ctr_norm_curated, ds_tpm_curated, file = \"normed_center_df_curated_08252023.RData\")"
  },
  {
    "objectID": "metat-analysis.html#import-kegg-ids",
    "href": "metat-analysis.html#import-kegg-ids",
    "title": "Analysis of metatranscriptome data",
    "section": "Import KEGG IDs",
    "text": "Import KEGG IDs\nThese have been curated.\n\nkegg <- read.csv(\"../KEGG_DB/combined_kegg.csv\")\n# head(kegg$KO_number)\ncurated_kegg <- read.csv(\"../KEGG_DB/reformat-kegg-pfam-skh.csv\")\n\nkey_geneid <- curated_kegg %>% \n  select(-X) %>% \n  right_join(kegg %>% select(KEGG = KO_number, everything(), -X)) %>% \n  distinct() %>% \n  select(starts_with(\"KeggOrthology_\"), Category01, Category02, FullName, GeneID, Gene_identification, KEGG, PFAM, Descriptions, REF = REFs)\n\nJoining with `by = join_by(KEGG)`\n\n\nWarning in right_join(., kegg %>% select(KEGG = KO_number, everything(), : Detected an unexpected many-to-many relationship between `x` and `y`.\nℹ Row 1 of `x` matches multiple rows in `y`.\nℹ Row 38 of `y` matches multiple rows in `x`.\nℹ If a many-to-many relationship is expected, set `relationship =\n  \"many-to-many\"` to silence this warning.\n\n\nSubset key_geneid dataframe to select what we want from it.\n\n# head(key_geneid)\n# unique(key_geneid$KeggOrthology_B)\n\nkegg_ortho_based <- key_geneid %>% \n  select(KeggOrthology_B, KEGG, GeneID, Gene_identification) %>% \n  filter(!is.na(KeggOrthology_B)) %>% \n  distinct()\n\n# dim(key_geneid)\n# dim(kegg_ortho_based)\n\n\nkegg_curated <- key_geneid %>% \n  select(Category01, Category02, KEGG, GeneID, Gene_identification) %>% \n  filter(!is.na(Category01)) %>% \n  distinct()\n# dim(kegg_curated)"
  },
  {
    "objectID": "metat-analysis.html#targeted",
    "href": "metat-analysis.html#targeted",
    "title": "Analysis of metatranscriptome data",
    "section": "Targeted",
    "text": "Targeted\nData for targeted sections is imported from process-eukrhythmic-output code titled Curated genes only.\n\nload(\"input-data/Avg_scaled_tpm_curated_08252023.RData\", verbose = TRUE)\n\nLoading objects:\n  counts_curated\n  sample_merged\n\n# load(\"input-data/normed_center_df_curated_08252023.RData\", verbose = TRUE)\n\nTo address question 1, subset to a curated set of genes.\n\ncounts_curated_annot <- counts_curated %>%\n  mutate(KEGG = str_remove(KEGG_ko, \"ko:\")) %>%\n  left_join(kegg_curated)\n\nJoining with `by = join_by(KEGG)`\n\n\nWarning in left_join(., kegg_curated): Detected an unexpected many-to-many relationship between `x` and `y`.\nℹ Row 5 of `x` matches multiple rows in `y`.\nℹ Row 277 of `y` matches multiple rows in `x`.\nℹ If a many-to-many relationship is expected, set `relationship =\n  \"many-to-many\"` to silence this warning.\n\ncounts_curated_kegg <- counts_curated %>%\n  mutate(KEGG = str_remove(KEGG_ko, \"ko:\")) %>%\n  left_join(kegg_ortho_based)\n\nJoining with `by = join_by(KEGG)`\n\n\nWarning in left_join(., kegg_ortho_based): Detected an unexpected many-to-many relationship between `x` and `y`.\nℹ Row 1 of `x` matches multiple rows in `y`.\nℹ Row 614 of `y` matches multiple rows in `x`.\nℹ If a many-to-many relationship is expected, set `relationship =\n  \"many-to-many\"` to silence this warning.\n\n\n\nunique(counts_curated_annot$Category01)\n\n[1] \"Gluconeogenesis-glycolysis\" \"Energy Acquisition\"        \n[3] \"Phagotrophy\"                \"Nutrient processing\"       \n[5] \"Glyoxylate cycle\"           \"N and P metabolism\"        \n[7] \"Carbon fixation\"            \"Photosynthesis\"            \n[9] \"Entner-Doudoroff pathway\"  \n\n\nPlanning to subset genes from the N and P metabolism category. Modify input table for downstream visualization.\n\n# min(as.numeric(counts_curated_annot))\nn_p_TPM_0 <- counts_curated_annot %>% \n  filter(Category01 == \"N and P metabolism\" & Domain == \"Eukaryota\") %>% \n  select(starts_with(\"mean.\"), Supergroup:Species, Category02, GeneID, Gene_identification, PFAMs) %>% \n  pivot_longer(cols = starts_with(\"mean.\"), names_to = \"SAMPLE_tmp\", values_to = \"TPM\") %>% \n  mutate(SAMPLE = str_remove(SAMPLE_tmp, \"mean.\"))\n\n# head(n_p_TPM_0)\nmin_TPM <- min((n_p_TPM_0 %>% filter(TPM>0))$TPM)\n# log(min_TPM)\n\nn_p_TPM_1 <- n_p_TPM_0 %>%\n  mutate(TAXA = case_when(\n    Phylum == \"Dinoflagellata\" ~ \"Dinoflagellate\",\n    Phylum == \"Ciliophora\" ~ \"Ciliate\",\n    Phylum == \"Haptophyta\" ~ \"Haptophyte\",\n    Phylum == \"Chlorophyta\" ~ \"Chlorophyte\",\n    Class == \"Bacillariophyta\" ~ \"Diatom\",\n    Supergroup == \"Rhizaria\" ~ \"Rhizaria\",\n    TRUE ~ \"Else\")) %>% \n  select(TAXA, SAMPLE, Category02, GeneID, Gene_identification, PFAMs, TPM) %>% \n  filter(TAXA != \"Else\") %>% \n  mutate(TPM_mod = case_when(\n    TPM == 0 ~ min_TPM,\n    TRUE ~ TPM))\n\n# Changed 0 for TPM to be the minimum\n\n# length(unique(n_p_TPM_1$GeneID)) # 24 total genes\n\nn_p_TPM_meanSAMPLE <- n_p_TPM_1 %>% \n  group_by(TAXA, Category02, GeneID, Gene_identification, PFAMs, TPM_mod) %>% \n  summarise(MEAN_TPM = mean(TPM_mod)) %>% \n  add_column(SAMPLE = \"all sample mean\")\n\n`summarise()` has grouped output by 'TAXA', 'Category02', 'GeneID',\n'Gene_identification', 'PFAMs'. You can override using the `.groups` argument.\n\nn_p_TPM_meanGeneID <- n_p_TPM_1 %>% \n  group_by(TAXA, Category02, SAMPLE, Gene_identification, PFAMs, TPM_mod) %>% \n  summarise(MEAN_TPM = mean(TPM_mod)) %>% \n  add_column(GeneID = \"all gene mean\")\n\n`summarise()` has grouped output by 'TAXA', 'Category02', 'SAMPLE',\n'Gene_identification', 'PFAMs'. You can override using the `.groups` argument.\n\nn_p_TPM_df <- n_p_TPM_1 %>% \n  group_by(TAXA, Category02, SAMPLE, GeneID, Gene_identification, PFAMs, TPM_mod) %>% \n  summarise(MEAN_TPM = mean(TPM_mod)) %>% \n  rbind(n_p_TPM_meanSAMPLE) %>% \n  rbind(n_p_TPM_meanGeneID) %>% \n  mutate(FACET_SAMPLE = case_when(\n    SAMPLE == \"all sample mean\" ~ \"AVG\",\n    TRUE ~ \"SAMPLE\"\n  ),\n  FACET_GENE = case_when(\n    GeneID == \"all gene mean\" ~ \"AVG\",\n    TRUE ~ \"GENE\"\n  )) \n\n`summarise()` has grouped output by 'TAXA', 'Category02', 'SAMPLE', 'GeneID',\n'Gene_identification', 'PFAMs'. You can override using the `.groups` argument.\n\nreds <- c(\"#f7f7f7\",\"#fee5d9\", \"#fcae91\", \"#fb6a4a\", \"#a50f15\")\nunique(n_p_TPM_df$TAXA)\n\n[1] \"Chlorophyte\"    \"Ciliate\"        \"Diatom\"         \"Dinoflagellate\"\n[5] \"Haptophyte\"     \"Rhizaria\"      \n\nn_p_TPM_df %>% \n  filter(TAXA == \"Diatom\") %>% \n   ggplot(aes(x = SAMPLE, y = GeneID, fill = log(MEAN_TPM))) +\n    geom_tile(stat = \"identity\", color = \"black\") +\n  scale_fill_stepsn(\n      # limits = c(-5,5),\n      # breaks = c(0.0, 3.5, 7.0, 10.5),\n      show.limits = TRUE,\n      colors = reds) +\n    coord_flip() +\n    theme_classic() +\n    facet_grid(cols = vars(FACET_GENE), rows = vars(FACET_SAMPLE), space = \"free\", scales = \"free\") +\n    # labs(x = \"\", y = \"TPM Relative Abundance\") +\n    # scale_x_discrete(position = \"top\") +\n    theme(axis.text.x = element_text(angle = 90, vjust = 0, hjust = 1, color = \"black\"),\n          strip.background = element_blank(),\n          panel.border = element_blank(),\n          axis.text.y = element_text(color = \"black\"),\n          axis.ticks = element_blank(),\n          panel.grid = element_blank())"
  },
  {
    "objectID": "metat-analysis.html#untargeted",
    "href": "metat-analysis.html#untargeted",
    "title": "Analysis of metatranscriptome data",
    "section": "Untargeted",
    "text": "Untargeted\n\nload(\"/scratch/group/hu-lab/pacocean-metaT/Robjs/euphotic_by_taxa.RData\")\n\nhttps://introtogenomics.readthedocs.io/en/latest/2021.11.11.DeseqTutorial.html\nFold change is calculated from a ratio of normalised read counts between two conditions of interest. However, level of gene expression changes are often shown as log2 fold change. Using log2 value become particularly helpful for visualising the gene expression changes. Furthermore, it eventually become intuitive that log2FC of 1 means expression level double in a given condition, and a negative log2FC means the gene is down-regulated in a given condition.\np-value of 0.05 means there is a 5% chance that the difference observed is due to chance (false-positive)\n\n# Plot log fold change\ndata.frame(res_hapto) %>% \n  mutate(REGULATION = case_when(\n    log2FoldChange > 0 ~ \"upregulated in CA\",\n    log2FoldChange < 0 ~ \"upregulated in NPSG\"\n  ),\n  SIGNIFICANT = case_when(\n    pvalue <= 0.05 ~ \"Significantly\",\n    TRUE ~ \"Not significantly\"\n  )) %>% \n  ggplot(aes(x = baseMean, y = log2FoldChange, color = SIGNIFICANT)) +\n    geom_point(stat = \"identity\") +\n    scale_x_log10() +\n    theme_classic() +\n    scale_color_manual(values = c(\"#878787\", \"#d73027\")) +\n    labs(title = mcols(res_hapto)$description[2])\n\n\n# Get table\nhapto_transcripts <- data.frame(res_hapto) %>% \n  mutate(REGULATION = case_when(\n    log2FoldChange > 0 ~ \"upregulated in CA\",\n    log2FoldChange < 0 ~ \"upregulated in NPSG\"\n  ),\n  SIGNIFICANT = case_when(\n    pvalue <= 0.05 ~ \"Significantly\",\n    TRUE ~ \"Not significantly\"\n  )) %>% \n  filter(SIGNIFICANT == \"Significantly\") %>% \n  rownames_to_column(var = \"SequenceID\") %>% \n  mutate(TAXA = \"Haptophyte\")"
  },
  {
    "objectID": "metat-analysis.html#targeted-1",
    "href": "metat-analysis.html#targeted-1",
    "title": "Analysis of metatranscriptome data",
    "section": "Targeted",
    "text": "Targeted\n\ncounts_curated_annot %>% \n  filter(Category01 == \"Phagotrophy\" & Domain == \"Eukaryota\") %>% \n  select(starts_with(\"mean.\"), Supergroup:Species, Category02, GeneID, Gene_identification, PFAMs) %>% \n  pivot_longer(cols = starts_with(\"mean.\"), names_to = \"SAMPLE_tmp\", values_to = \"TPM\") %>% \n  mutate(SAMPLE = str_remove(SAMPLE_tmp, \"mean.\"),\n         LOG_TPM = log(TPM)) %>%\n  ggplot(aes(x = Phylum, y = GeneID, fill = LOG_TPM)) +\n    geom_tile()"
  },
  {
    "objectID": "metat-analysis.html#untargeted-1",
    "href": "metat-analysis.html#untargeted-1",
    "title": "Analysis of metatranscriptome data",
    "section": "Untargeted",
    "text": "Untargeted"
  },
  {
    "objectID": "process-eukrhythmic-output.html#create-subset-parameters",
    "href": "process-eukrhythmic-output.html#create-subset-parameters",
    "title": "eukrhythmic compilation",
    "section": "Create subset parameters",
    "text": "Create subset parameters\n\nSubset samples as parameters\nUse the metadata data frame to create sample lists for the comparisons we want to do.\n\nmetadata <- read.csv(\"input-data/sample-list-revised.txt\")\n\nFor the whole community work, we want to compare CA vs NPSG and euphotic vs. subeuphotic.\n\nall_samples <- metadata %>% \n  select(sample = SAMPLE)\n\nnpsg_only <- metadata %>% \n  filter(PACIFIC_REGION == \"NPSG\") %>% \n  select(sample = SAMPLE)\n# Compare euphotic and subeuphotic\n# Use this to compare across months too\n\nca_only <- metadata %>% \n  filter(PACIFIC_REGION != \"NPSG\") %>% \n  select(sample = SAMPLE)\n# Compare euphotic and subeuphotic\n\neuphotic <- metadata %>% \n  filter(LIGHT == \"Euphotic\")%>% \n  select(sample = SAMPLE)\n# Compare NPSG to CA euphotic zone\n\nsubeuphotic <- metadata %>% \n  filter(LIGHT != \"Euphotic\")%>% \n  select(sample = SAMPLE)\n# Compare NPSG to CA subeuphotic zone\n\n\n\nSubset genes & taxa as parameters\nNeed to make a list of the SequenceID from the taxonomy and functional annotations.\n\ntaxfxn <- read.csv(\"TaxonomicAndFunctionalAnnotations.csv\")\n\n\nGenes\nDetermine character lists from gene list as subsets for our later queries.\n\n# Get list of annotations where a GO, PFAM, and KEGG ID were assigned.\ngenes_fxn_all <- as.character(\n  filter(taxfxn, GOs != \"-\" & PFAMs != \"-\" & KEGG_ko != \"-\") %>% \n    select(SequenceID) %>% \n    .[[\"SequenceID\"]]) #this line outputs the selected vector from the pipe\n\n# Removing unclassified and unannotated sequences\ngenes_tax_fxn_all <- as.character(\n  filter(taxfxn, GOs != \"-\" & PFAMs != \"-\" & KEGG_ko != \"-\"\n         & Domain == \"Eukaryota\" & Supergroup != \"Unclassified\") %>% \n    select(SequenceID) %>% \n    .[[\"SequenceID\"]])\n\nFrom KEGG database reformatting make key_geneid. Isolate genes that are curated.\n\nkegg <- read.csv(\"../KEGG_DB/combined_kegg.csv\")\nhead(kegg$KO_number)\ncurated_kegg <- read.csv(\"../KEGG_DB/reformat-kegg-pfam-skh.csv\")\n\nkey_geneid <- curated_kegg %>%\n  select(-X) %>%\n  right_join(kegg %>% select(KEGG = KO_number, everything(), -X)) %>%\n  distinct() %>%\n  select(starts_with(\"KeggOrthology_\"), Category01, Category02, FullName, GeneID, Gene_identification, KEGG, PFAM, Descriptions, REF = REFs)\n\n# write.csv(key_geneid, file = \"keygene_id.csv\")\n\n\nkegg_keep <- as.character(key_geneid %>% \n  filter(Category01 != \"\" & !(is.na(Category01))) %>% \n  select(KEGG) %>% \n  .[[\"KEGG\"]])\n# length(kegg_keep)\n\ngenes_kegg_curated <- as.character(taxfxn %>%\n    mutate(KEGG_mod = str_remove_all(KEGG_ko, \"ko:\")) %>% \n    filter(KEGG_mod %in% kegg_keep) %>% \n    select(SequenceID) %>% \n    .[[\"SequenceID\"]])\n\n\n\nTaxa\nIsolate transcript IDs (SequenceID) of individual taxa. For each taxa subset, we are also only selecting transcript IDs with PFAM or KEGG IDs.\nFor queries, we want to isolate:\n\neuks_only <- as.character(\n  filter(taxfxn, Domain == \"Eukaryota\" & (PFAMs != \"-\" | KEGG_ko != \"-\")) %>% \n    select(SequenceID) %>% \n    .[[\"SequenceID\"]])\n\ndiatom <- as.character(\n  filter(taxfxn, Class == \"Bacillariophyta\" & (PFAMs != \"-\" | KEGG_ko != \"-\")) %>% \n    select(SequenceID) %>% \n    .[[\"SequenceID\"]]) \n\n#Dinoflagellata pPhylum\ndinos <- as.character(\n  filter(taxfxn, Phylum == \"Dinoflagellata\" & (PFAMs != \"-\" | KEGG_ko != \"-\")) %>% \n    select(SequenceID) %>% \n    .[[\"SequenceID\"]]) \n\n#Haptophyta in phylum\nhapto <- as.character(\n  filter(taxfxn, Phylum == \"Haptophyta\" & (PFAMs != \"-\" | KEGG_ko != \"-\")) %>% \n    select(SequenceID) %>% \n    .[[\"SequenceID\"]])\n\n# Chlorophyta\nchloro <- as.character(\n  filter(taxfxn, Phylum == \"Chlorophyta\" & (PFAMs != \"-\" | KEGG_ko != \"-\")) %>% \n    select(SequenceID) %>% \n    .[[\"SequenceID\"]])\n\n#Ciliophora\nciliate <- as.character(\n  filter(taxfxn, Phylum == \"Ciliophora\" & (PFAMs != \"-\" | KEGG_ko != \"-\")) %>% \n    select(SequenceID) %>% \n    .[[\"SequenceID\"]])\n\n# Rhizaria at supergroup\nrhizaria <- as.character(\n  filter(taxfxn, Supergroup == \"Rhizaria\" & (PFAMs != \"-\" | KEGG_ko != \"-\")) %>% \n    select(SequenceID) %>% \n    .[[\"SequenceID\"]])\n\nSave objects for subseting.\n\nsave(\n  # These are data frames\n  all_samples, npsg_only, ca_only, euphotic, subeuphotic,\n  # these are lists (character lists)\n     genes_fxn_all, genes_tax_fxn_all, key_geneid, genes_kegg_curated, \n     euks_only, diatom, dinos, hapto, chloro, ciliate, rhizaria,\n     file = \"sample-gene-lists-forTXI.RData\")\n\n\n\n\nTxi function\nCode for this function is from: https://rdrr.io/github/hcnh174/hlsgr/man/subsetTxi.html Code: https://rdrr.io/github/hcnh174/hlsgr/src/R/rnaseq.R\n\n# Subset txi directly\nsubsetTxi <- function(txi, samples, include_genes=rownames(txi$counts))\n  {\n  genes <- rownames(txi$counts)[rownames(txi$counts) %in% include_genes]\n  txi$abundance <- txi$abundance[genes, samples$sample]\n  txi$counts <- txi$counts[genes, samples$sample]\n  txi$length <- txi$length[genes, samples$sample]\n  return(txi)\n  }\n\n# Example usage \n# tmp <- sample(taxfxn$SequenceID,10,replace = FALSE)\n# pola <- data.frame(sample = c(\"PortofLA_1\", \"PortofLA_2\"))\n# txi_pola <- subsetTxi(txi, pola, tmp)"
  },
  {
    "objectID": "process-eukrhythmic-output.html#all-samples",
    "href": "process-eukrhythmic-output.html#all-samples",
    "title": "eukrhythmic compilation",
    "section": "All samples",
    "text": "All samples\nSee script scripts/run_txi_wholecomm.R.\n\n# Subset eukaryotes only, and keep all samples.\ntxi_euk_annot <- subsetTxi(txi, all_samples, euks_only)\n\nds_tpm_light <- DESeqDataSetFromTximport(txi_euk_annot,\n                                              colData = sample_merged,\n                                              design = ~0 + LIGHT)\n\nds_tpm_pac <- DESeqDataSetFromTximport(txi_euk_annot,\n                                              colData = sample_merged,\n                                              design = ~0 + PACIFIC_REGION)\n\nds_tpm_lightpac <- DESeqDataSetFromTximport(txi_euk_annot,\n                                              colData = sample_merged,\n                                              design = ~0 + PACIFIC_REGION + LIGHT)\n\nsave(ds_tpm_light, ds_tpm_pac, ds_tpm_lightpac, file = \"light-pacregion-deseq.RData\")"
  },
  {
    "objectID": "process-eukrhythmic-output.html#by-region",
    "href": "process-eukrhythmic-output.html#by-region",
    "title": "eukrhythmic compilation",
    "section": "By region",
    "text": "By region\nSee script scripts/run_txi_region.r.\n\n# Subset txi\ntxi_npsg <- subsetTxi(txi, npsg_only, euks_only)\n\n# Reset sample_merged\n## Subset\ntmp_sample_merged <- sample_merged %>% \n  filter(Sample_rep %in% as.character(npsg_only$sample))\n## Set names\nrownames(tmp_sample_merged) <- tmp_sample_merged$Sample_rep\nrownames(tmp_sample_merged) <- colnames(txi_npsg$counts)\n\n# Compare Euphotic vs. sub-euphotic samples in the NPSG\nds_tpm_npsg_light <- DESeqDataSetFromTximport(txi_npsg,\n                                              colData = tmp_sample_merged,\n                                              design = ~0 + LIGHT)\n\n# Compare July vs. March in the NPSG\nds_tpm_npsg_month <- DESeqDataSetFromTximport(txi_npsg,\n                                              colData = tmp_sample_merged,\n                                              design = ~0 + MONTH)\n\nsave(ds_tpm_npsg_light, ds_tpm_npsg_month, file = \"/vortexfs1/scratch/sarahhu/txi-objs-metaT/npsg-deseq.RData\")\n\n\ntxi_ca <- subsetTxi(txi, ca_only, euks_only)\n\ntmp_sample_merged <- sample_merged %>% \n  filter(Sample_rep %in% as.character(ca_only$sample))\nrownames(tmp_sample_merged) <- tmp_sample_merged$Sample_rep\nrownames(tmp_sample_merged) <- colnames(txi_ca$counts)\n\n# Compare euphotic vs. subeuphotic in coastal California\n## Includes Port of LA and Catalina\nds_tpm_ca_light <- DESeqDataSetFromTximport(txi_ca,\n                                              colData = tmp_sample_merged,\n                                              design = ~0 + LIGHT)\n\nsave(ds_tpm_ca_light, file = \"/vortexfs1/scratch/sarahhu/txi-objs-metaT/ca-deseq.RData\")\n\n##\nrm(txi_npsg);rm(txi_ca) #Save room"
  },
  {
    "objectID": "process-eukrhythmic-output.html#by-light-availability",
    "href": "process-eukrhythmic-output.html#by-light-availability",
    "title": "eukrhythmic compilation",
    "section": "By light availability",
    "text": "By light availability\nSee script scripts/run_txi_light.r.\n\n# Subset txi\ntxi_euph <- subsetTxi(txi, euphotic, euks_only)\n\ntmp_sample_merged <- sample_merged %>% \n  filter(Sample_rep %in% as.character(euphotic$sample))\nrownames(tmp_sample_merged) <- tmp_sample_merged$Sample_rep\nrownames(tmp_sample_merged) <- colnames(txi_euph$counts)\n\n# Compare CA versus NPSG within euphotic samples\nds_tpm_euphotic <- DESeqDataSetFromTximport(txi_euph,\n                                              colData = tmp_sample_merged,\n                                              design = ~0 + PACIFIC_REGION)\n\n\n\ntxi_subeuph <- subsetTxi(txi, subeuphotic, euks_only)\n\ntmp_sample_merged <- sample_merged %>% \n  filter(Sample_rep %in% as.character(subeuphotic$sample))\nrownames(tmp_sample_merged) <- tmp_sample_merged$Sample_rep\nrownames(tmp_sample_merged) <- colnames(txi_subeuph$counts)\n\n# Compare CA versus NPSG at subeuphotic depths\nds_tpm_subeuphotic <- DESeqDataSetFromTximport(txi_subeuph,\n                                              colData = tmp_sample_merged,\n                                              design = ~0 + PACIFIC_REGION)\n\nsave(ds_tpm_subeuphotic, ds_tpm_euphotic, file = \"/vortexfs1/scratch/sarahhu/txi-objs-metaT/euphotic-subeuphotic-deseq.RData\")\n\n# save(txi_euph, txi_subeuph, file = \"/vortexfs1/scratch/sarahhu/txi-objs-metaT/light_txi.RData\")"
  },
  {
    "objectID": "process-eukrhythmic-output.html#question-1",
    "href": "process-eukrhythmic-output.html#question-1",
    "title": "eukrhythmic compilation",
    "section": "Question 1",
    "text": "Question 1\nFor the first of our two core questions, we want to know what genes are significantly differentially expressed among the euphotic zone samples for the dominant protistan phytoplankton. We are specifically focusing on diatoms, chlorophytes, archaeplastidia (chlorophya), dinoflagellates, and haptophytes for this.\n\nHow does nutrient utilization among euphotic zone phytoplankton vary between coastal California and the NPSG?\n\n\n# Function to subset txi by individual taxa and perform DESeq\n\ndeseq_region_bytax <- function(sample_set, gene_set){\n  # First incorporate the txi subset fxn\n  subsetTxi <- function(txi, samples, include_genes=rownames(txi$counts))\n  {\n    genes <- rownames(txi$counts)[rownames(txi$counts) %in% include_genes]\n    txi$abundance <- txi$abundance[genes, samples$sample]\n    txi$counts <- txi$counts[genes, samples$sample]\n    txi$length <- txi$length[genes, samples$sample]\n    return(txi)\n  }\n  # Run subset and sample merge re-set\n  txi_output <- subsetTxi(txi, sample_set, gene_set)\n  # This script will keep replacing tmp_sample_merged\n  tmp_sample_merged <- sample_merged %>% \n    filter(Sample_rep %in% as.character(sample_set$sample))\n  rownames(tmp_sample_merged) <- tmp_sample_merged$Sample_rep\n  rownames(tmp_sample_merged) <- colnames(txi_output$counts)\n  #\n  # Import as DESeq object - use PACIFIC_REGION in the design\n  # DESeq\n  ds_tpm_output <- DESeqDataSetFromTximport(txi_output,\n                                            colData = tmp_sample_merged,\n                                            design = ~0 + PACIFIC_REGION)\n  # return(ds_tpm_output)\n  # Further process DESeq\n  groupsize <- 2 # Transcript to consider, must be in at least 3 samples\n  keep <- rowSums(counts(ds_tpm_output) >= 10) >= groupsize # And have >= to 10 counts\n  ds_tpm_output_filtered <- ds_tpm_output[keep,]\n  ###\n  # Filtering stats:\n  cat(\"\\nStarted with \", dim(ds_tpm_output)[1], \"observations. Filtering by 2 samples and 10 counts resulted in,\", dim(ds_tpm_output_filtered)[1], \", which is\", (100*(dim(ds_tpm_output_filtered)[1]/dim(ds_tpm_output)[1])), \"% of the data.\\n\\n\")\n  ###\n  #\n  ## Positive log fold change == up regulared in CA, compared to NPSG\n  ds_tpm_output_filtered$PACIFIC_REGION <- factor(ds_tpm_output_filtered$PACIFIC_REGION, levels = c(\"NPSG\", \"CA\"))\n  de_tax_output <- DESeq2::DESeq(ds_tpm_output_filtered)\n  resultsNames(de_tax_output)\n  summary(de_tax_output)\n  return(de_tax_output)\n  cat(\"\\n\\nCompleted.\\n\\n\")\n}\n\n\n## Apply to each taxa\n\n# From the euphotic samples, what are DE genes among haptophytes between CA and NPSG?\ncat(\"\\n\\nDiatoms start.\\n\\n\")\nde_diatom <- deseq_region_bytax(euphotic, diatom)\n\ncat(\"\\n\\Haptophytes start.\\n\\n\")\n# From the euphotic samples, what are DE genes among haptophytes between CA and NPSG?\nde_hapto <- deseq_region_bytax(euphotic, hapto)\n\n\ncat(\"\\n\\Dinoflagellates start.\\n\\n\")\n# From the euphotic samples, what are DE genes among Dinoflagellates between CA and NPSG?\nde_dinos <- deseq_region_bytax(euphotic, dinos)\n\ncat(\"\\n\\Chlorophytes start.\\n\\n\")\n# From the euphotic samples, what are DE genes among chlorophytes between CA and NPSG?\nde_chloro <- deseq_region_bytax(euphotic, chloro)\n\nsave(de_diatom, de_hapto, de_dinos, de_chloro, file = \"/scratch/group/hu-lab/pacocean-metaT/Robjs/euphotic_by_taxa.RData\")"
  },
  {
    "objectID": "process-eukrhythmic-output.html#question-2",
    "href": "process-eukrhythmic-output.html#question-2",
    "title": "eukrhythmic compilation",
    "section": "Question 2",
    "text": "Question 2\nWe can repeat the above approach, but select different taxa.\n\nDo we see a similar euphotic vs. sub-euphotic shift in the metabolic potential of taxa observed at coastal California and the NPSG?\n\n~ repeat code above with euphotic versus euphotic ~"
  }
]
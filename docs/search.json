[
  {
    "objectID": "env-metadata.html",
    "href": "env-metadata.html",
    "title": "Environmental metadata",
    "section": "",
    "text": "library(tidyverse); library(patchwork)\n\n\ntmp_all_metadata <- read.csv(\"input-data/All_metadata.csv\")\n# colnames(tmp_all_metadata)\n# unique(tmp_all_metadata$Site)\n# View(tmp_all_metadata)\njuly <- read.delim(\"input-data/flor_env_ALOHAJuly_SPOT.txt\")\nmarch <- read.delim(\"input-data/flour_ALOHAMarch.txt\")\n\n\n# head(july)\n# head(march)\nfluor <- july %>% \n  left_join(march) %>% \n  pivot_longer(cols = SPOT:ALOHAMarch, names_to = \"Site\", values_to = \"Fluor\")\n\nJoining with `by = join_by(Depth)`\n\n# unique(fluor$Site)\nmetadata_all <- tmp_all_metadata %>% \n  filter((!Site == \"ALOHA\")) %>% \n  select(-X) %>% \n  left_join(fluor) %>% \n  pivot_longer(cols = Temp:Fluor, names_to = \"VARIABLE\", values_to = \"VALUE\")\n\nJoining with `by = join_by(Site, Depth, Fluor)`\n\n# head(metadata_all)\n# unique(metadata_all$Site)\n\nFigure aesthetics\n\nsite_order <- c(\"SPOT\", \"PortofLA\", \"Catalina\", \"ALOHAJuly\", \"ALOHAMarch\")\nsite_label <- c(\"SPOT\", \"Port of LA\", \"Catalina\", \"ALOHA July\", \"ALOHA March\")\nsite_color_fill <- c(\"#3288bd\", \"#8073ac\", \"#66bd63\", \"#e6f598\", \"#d53e4f\")\nsite_color_fill_nopola <- c(\"#3288bd\", \"#66bd63\", \"#e6f598\", \"#d53e4f\")\n\nIsolate specific depths, add a label\n\nspot<-c(1,150,885)\nspotsite<-c(\"SPOT\", \"Catalina\", \"PortofLA\")\naloha<-c(1,120,150,1000)\n\nmetadata_pt_depth <- metadata_all %>% \n  filter(Site %in% spotsite & Depth %in% spot | grepl(\"ALOHA\", Site) & Depth %in% aloha) %>% \n  add_column(Label = \"discrete\") %>% \n  mutate(VAR_ORDER = factor(VARIABLE, levels = c(\"Temp\", \"Fluor\", \"Sal\", \"Oxy\"), labels = c(\"Temperature\", \"Chlorophyll\", \"Salinity\", \"Oxygen\"))) %>% \n  mutate(SITE_ORDER = factor(Site, levels = site_order, labels = site_label))\n# unique(metadata_all$Site)\n\n\nallenv <- metadata_all %>% \n  mutate(VAR_ORDER = factor(VARIABLE, levels = c(\"Temp\", \"Fluor\", \"Sal\", \"Oxy\"), labels = c(\"Temperature\", \"Chlorophyll\", \"Salinity\", \"Oxygen\"))) %>% \n  mutate(SITE_ORDER = factor(Site, levels = site_order, labels = site_label)) %>% \n  arrange(Depth) %>% \n  ggplot(aes(y = Depth, x = VALUE)) +\n  geom_hline(yintercept = 0, alpha = 0.3) +\n  geom_path(size = 1, aes(color = SITE_ORDER)) +\n  geom_point(data = metadata_pt_depth, size = 2, aes(y = Depth, x = VALUE, fill = SITE_ORDER, shape = SITE_ORDER)) +\n    scale_shape_manual(values = c(21, 22, 23, 24, 25)) +\n    scale_fill_manual(values = site_color_fill) +\n    scale_color_manual(values = site_color_fill) +\n  scale_y_reverse() +\n  facet_grid(. ~ VAR_ORDER, scales = \"free\", switch = \"both\") +\n  theme_linedraw() +\n  labs(x = \"\", y = \"Depth (m)\") +\n  theme(strip.background = element_blank(),\n        strip.placement = \"outside\",\n        strip.text = element_text(color = \"black\"),\n        legend.title = element_blank())\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\nallenv\n\nWarning: Removed 2 rows containing missing values (`geom_path()`).\n\n\n\n\n\n\nno_pola <- metadata_all %>% \n  mutate(VAR_ORDER = factor(VARIABLE, levels = c(\"Temp\", \"Fluor\", \"Sal\", \"Oxy\"), labels = c(\"Temperature\", \"Chlorophyll\", \"Salinity\", \"Oxygen\"))) %>% \n  mutate(SITE_ORDER = factor(Site, levels = site_order, labels = site_label)) %>% \n  arrange(Depth) %>% \n  filter(Site != \"PortofLA\") %>% \n  ggplot(aes(y = Depth, x = VALUE)) +\n  geom_hline(yintercept = 0, alpha = 0.3) +\n  geom_path(size = 1, aes(color = SITE_ORDER)) +\n  geom_point(data = (metadata_pt_depth %>% filter(Site != \"PortofLA\")), size = 2, aes(y = Depth, x = VALUE, fill = SITE_ORDER, shape = SITE_ORDER)) +\n    scale_shape_manual(values = c(21, 22, 23, 24, 25)) +\n    scale_fill_manual(values = site_color_fill_nopola) +\n    scale_color_manual(values = site_color_fill_nopola) +\n  scale_y_reverse() +\n  facet_grid(. ~ VAR_ORDER, scales = \"free\", switch = \"both\") +\n  theme_linedraw() +\n  labs(x = \"\", y = \"Depth (m)\") +\n  theme(strip.background = element_blank(),\n        strip.placement = \"outside\",\n        strip.text = element_text(color = \"black\"),\n        legend.title = element_blank())\n\nno_pola\n\nWarning: Removed 2 rows containing missing values (`geom_path()`).\n\n\n\n\n\n\n# svg(\"figs/water-col.svg\", w = 8, h = 7)\nallenv + no_pola + patchwork::plot_layout(ncol = 1)\n\nWarning: Removed 2 rows containing missing values (`geom_path()`).\nRemoved 2 rows containing missing values (`geom_path()`).\n\n\n\n\n# dev.off()\n\n# Requires manual modification of chlorophyll with Port of LA sample"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Metatranscriptome survey of Pacific Ocean",
    "section": "",
    "text": "Home for code and analysis for microeukaryotic metatranscriptome survey.\nin prep\nTO DO:"
  },
  {
    "objectID": "metat-analysis.html",
    "href": "metat-analysis.html",
    "title": "Analysis of metatranscriptome data",
    "section": "",
    "text": "library(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.2     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(data.table)\n\n\nAttaching package: 'data.table'\n\nThe following objects are masked from 'package:lubridate':\n\n    hour, isoweek, mday, minute, month, quarter, second, wday, week,\n    yday, year\n\nThe following objects are masked from 'package:dplyr':\n\n    between, first, last\n\nThe following object is masked from 'package:purrr':\n\n    transpose\n\nlibrary(compositions)\n\nWelcome to compositions, a package for compositional data analysis.\nFind an intro with \"? compositions\"\n\n\nAttaching package: 'compositions'\n\nThe following objects are masked from 'package:stats':\n\n    anova, cor, cov, dist, var\n\nThe following object is masked from 'package:graphics':\n\n    segments\n\nThe following objects are masked from 'package:base':\n\n    %*%, norm, scale, scale.default\n\nlibrary(patchwork)"
  },
  {
    "objectID": "metat-analysis.html#input-all-tpm-results",
    "href": "metat-analysis.html#input-all-tpm-results",
    "title": "Analysis of metatranscriptome data",
    "section": "Input all TPM results",
    "text": "Input all TPM results\nBelow R objects sourced by first isolating only the eukaryotic transcripts, averaging across replicates, and placing into long format.\n\n# | echo: true\n# | eval: false\nload(file = \"Avg_scaled_tpm_08222023.RData\", verbose = T)\ntaxfxn &lt;- read.csv(\"TaxonomicAndFunctionalAnnotations.csv\")\n\nImport metadata as well.\n\n# metadata_tmp &lt;- read.delim(\"input-data/complete-sample-list.txt\", header = TRUE, sep = \",\")\n# sample_metadata &lt;- read.csv(\"input-data/sample_table.csv\") %&gt;%\n  # unite(SAMPLE, Sample, Replicate, sep = \"_\", remove = FALSE) %&gt;% \n  # select(RUN = SRR, everything()) %&gt;% \n  # right_join(metadata_tmp)\n\n# write.csv(sample_metadata, file = \"input-data/sample-metadata.csv\")\nsample_metadata_1 &lt;- read.csv(\"input-data/sample-metadata.csv\")\nsample_metadata &lt;- sample_metadata_1 %&gt;% \n  mutate(SAMPLE_MATCH = sub(\"_[^_]+$\", \"\", SAMPLE))"
  },
  {
    "objectID": "metat-analysis.html#taxonomic-level-curation-and-estimate-relative-abundance",
    "href": "metat-analysis.html#taxonomic-level-curation-and-estimate-relative-abundance",
    "title": "Analysis of metatranscriptome data",
    "section": "Taxonomic level curation and estimate relative abundance",
    "text": "Taxonomic level curation and estimate relative abundance\nTaxa curation 3) Average across replicates (or how should replicates be considered) 4) Sum to each sample"
  },
  {
    "objectID": "metat-analysis.html#taxonomy-bar-plot",
    "href": "metat-analysis.html#taxonomy-bar-plot",
    "title": "Analysis of metatranscriptome data",
    "section": "Taxonomy bar plot",
    "text": "Taxonomy bar plot\n\nbar plot of relative TPM? CPM? for major taxnomic groups Keep ALOHA July and April separate, ALOHA on the left side and on the right side, all CA sites. Also place “sun” emoji for samples that are within the euphotic zone"
  },
  {
    "objectID": "metat-analysis.html#pcoa-with-whole-community-functional-profile",
    "href": "metat-analysis.html#pcoa-with-whole-community-functional-profile",
    "title": "Analysis of metatranscriptome data",
    "section": "PCoA with whole community functional profile",
    "text": "PCoA with whole community functional profile\nImport PCA objects from running R on the HPC.\n\nload(\"input-data/pca_objects.RData\", verbose = TRUE)\n\nLoading objects:\n  pca_df\n  variance_lr\n\n\n\n# pca_lr &lt;- prcomp(as.data.frame(t(df_ctr_norm))) # done via HPC\n# \n# variance_lr &lt;- (pca_lr$sdev^2)/sum(pca_lr$sdev^2)\n# ## View bar plot\n# svg(\"screeplot.svg\", h = 6, w = 9)\nbarplot(variance_lr, main = \"Log-Ratio PCA Screeplot\", xlab = \"PC Axis\", ylab = \"% Variance\", cex.names = 1.5, cex.axis = 1.5, cex.lab = 1.5, cex.main = 1.5)\n\n\n\n# dev.off()\n\n\nhead(pca_df)\n\n            SAMPLE_MATCH       PC1       PC2        PC3\nPortofLA_4    PortofLA_4 -704.4176 2145.6806 1696.13738\nPortofLA_3    PortofLA_3 -578.4998 2446.1131 2032.43291\nPortofLA_2    PortofLA_2 -425.8412 2750.0947 2354.43634\nPortofLA_1    PortofLA_1 -295.0105 2854.7883 2500.92913\nCatalina_24  Catalina_24 2282.0410 -649.0612   18.82071\nCatalina_23  Catalina_23 2007.2327 -560.7567   12.59361\n\n\n\npc1 &lt;- round(variance_lr[1] * 100, 2)\npc2 &lt;- round(variance_lr[2] * 100, 2)\nhead(sample_metadata)\n\n  X        RUN         SAMN                 SAMPLE     Sample   Replicate\n1 1 SRR6048900 SAMN07647713 July_1000m_Rep1andRep2 July_1000m Rep1andRep2\n2 2 SRR6048899 SAMN07647714  July_150m_Rep1andRep2  July_150m Rep1andRep2\n3 3 SRR6048898 SAMN07647715           July_5m_Rep1    July_5m        Rep1\n4 4 SRR6048897 SAMN07647716           July_5m_Rep2    July_5m        Rep2\n5 5 SRR6048896 SAMN07647717          July_DCM_Rep1   July_DCM        Rep1\n6 6 SRR6048895 SAMN07647718          July_DCM_Rep2   July_DCM        Rep2\n        BASES  BIOPROJECT    BIOSAMPLE       DATE EXPERIMENT\n1 22179808750 PRJNA406025 SAMN07647713 2015-07-30 SRX3195831\n2 22251034000 PRJNA406025 SAMN07647714 2015-07-30 SRX3195832\n3 36858334750 PRJNA406025 SAMN07647715 2015-07-30 SRX3195833\n4 28427020000 PRJNA406025 SAMN07647716 2015-07-30 SRX3195834\n5 33698315000 PRJNA406025 SAMN07647717 2015-07-30 SRX3195835\n6 30540287750 PRJNA406025 SAMN07647718 2015-07-30 SRX3195836\n                 LAT_LON           LIBRARY           SAMPLENAME DEPTH\n1 24.54987 N 156.33178 W        July_1000m NPSG_ALOHA_1000_July  1000\n2 24.54987 N 156.33178 W         July_150m  NPSG_ALOHA_150_July   150\n3 24.54987 N 156.33178 W July_surface_Rep1    NPSG_ALOHA_5_July     5\n4 24.54987 N 156.33178 W July_surface_Rep2    NPSG_ALOHA_5_July     5\n5 24.54987 N 156.33178 W     July_DCM_Rep1  NPSG_ALOHA_119_July   119\n6 24.54987 N 156.33178 W     July_DCM_Rep2  NPSG_ALOHA_119_July   119\n    SAMPLE_ID_PARSED DEPTH_CATEGORY REGION PACIFIC_REGION MONTH        LIGHT\n1  July ALOHA 1000 m         1000 m  ALOHA           NPSG  July Sub-euphotic\n2   July ALOHA 150 m          150 m  ALOHA           NPSG  July     Euphotic\n3 July ALOHA surface        surface  ALOHA           NPSG  July     Euphotic\n4 July ALOHA surface        surface  ALOHA           NPSG  July     Euphotic\n5     July ALOHA DCM            DCM  ALOHA           NPSG  July     Euphotic\n6     July ALOHA DCM            DCM  ALOHA           NPSG  July     Euphotic\n  SAMPLE_MATCH\n1   July_1000m\n2    July_150m\n3      July_5m\n4      July_5m\n5     July_DCM\n6     July_DCM\n\n# svg(\"Rplot_metat_pca_wholecommunity.svg\", width = 7, height = 7)\npca_df %&gt;% \n  left_join(sample_metadata, by = c(\"SAMPLE_MATCH\" = \"SAMPLE\")) %&gt;% \n  ggplot(aes(x = PC1, y = PC2)) +\n    geom_point(stroke = 1, size = 4, aes(shape = REGION, fill = DEPTH_CATEGORY, color = LIGHT)) +\n    scale_shape_manual(values = c(21, 22, 23, 24)) +\n    scale_fill_manual(values = c(\"#6a51a3\", \"#f768a1\", \"#8c96c6\", \"#fd8d3c\", \"#238b45\")) +\n    scale_color_manual(values = c(\"#cccccc\", \"#252525\")) +\n    theme_linedraw() + coord_fixed(ratio = 1) +\n    guides(fill = guide_legend(override.aes = list(shape = c(22)))) +\n    geom_hline(yintercept = 0) + geom_vline(xintercept = 0) +\n    theme(legend.title = element_blank(),\n          axis.text = element_text(color = \"black\", face = \"bold\", size = 13)) +\n    labs(x =  paste(pc1, \"%\"), y = paste(pc2, \"%\"))"
  },
  {
    "objectID": "metat-analysis.html#define-each-site-by-module",
    "href": "metat-analysis.html#define-each-site-by-module",
    "title": "Analysis of metatranscriptome data",
    "section": "Define each site by module",
    "text": "Define each site by module\n(k-means?)"
  },
  {
    "objectID": "metat-analysis.html#pcoa-with-curated-functional-profiles-and-known-taxonomic-ids.",
    "href": "metat-analysis.html#pcoa-with-curated-functional-profiles-and-known-taxonomic-ids.",
    "title": "Analysis of metatranscriptome data",
    "section": "PCoA with curated functional profiles and known taxonomic IDs.",
    "text": "PCoA with curated functional profiles and known taxonomic IDs.\n(subset this way to increase confidence?)\n\nHeterotrophy\nIsolate and sum to pathways associated with heterotrophy. Gene level is likely too much. Determine for each\n\nHow varied are the transcriptional signatures related to heterotrophy among protists?\n\nUse flag/half square heatmap, where top half shows the percent number of genes and bottom half shows the TPM summary.\n\n\nN & P metabolism\nIsolate at individual gene level for N & P pathways. Show TPM across sites and core taxa\n\nFor ecologically-important phytoplankton at ALOHA and coastal CA, what is the relative importance of nutrient profiles? nutrient utilization?\n\nPlot heat map for each taxa. Show all N and P relevant genes on the x axis and y axis should have all samples.\n\n\nDetermine statistical significance\nEstimate statistical significance for N&P genes, pairwise comparisons. Then add a column for each gene ID that lists the number of samples that are statistically different."
  },
  {
    "objectID": "index.html#study-sites",
    "href": "index.html#study-sites",
    "title": "Metatranscriptome survey of Pacific Ocean",
    "section": "Study sites",
    "text": "Study sites\n\nSPOT, POLA, Catalina\nALOHA"
  },
  {
    "objectID": "index.html#sequencing-information",
    "href": "index.html#sequencing-information",
    "title": "Metatranscriptome survey of Pacific Ocean",
    "section": "Sequencing information",
    "text": "Sequencing information"
  },
  {
    "objectID": "index.html#eukrhythmic",
    "href": "index.html#eukrhythmic",
    "title": "Metatranscriptome survey of Pacific Ocean",
    "section": "eukrhythmic",
    "text": "eukrhythmic"
  },
  {
    "objectID": "index.html#summary-of-analysis",
    "href": "index.html#summary-of-analysis",
    "title": "Metatranscriptome survey of Pacific Ocean",
    "section": "Summary of analysis",
    "text": "Summary of analysis"
  },
  {
    "objectID": "process-eukrhythmic-output.html",
    "href": "process-eukrhythmic-output.html",
    "title": "eukrhythmic compilation",
    "section": "",
    "text": "List of output directories:\nfinal-files/\n\n00-nucleotide_assembly/\n\nMAD.filtered.nospace.fasta: Full length sequences of merged assembly groups (MAD) that have been de-duplicated\n\n01-predicted_proteins/\n\nMAD.fasta.transdecoder.cds: Identified coding regions of transcripts from the Merged assembly groups (MAD)\nMAD.fasta.transdecoder.pep: Translated peptide sequences from the Merged assembly groups (MAD)\n\n02-annotation_table/\n\nTaxonomicAndFunctionalAnnotations.csv: Taxonomic levels, GOs, PFAMs, and KEGG KOs - assigned by short seq ID and the full sequence ID.\n\n03-abundance_tables/\n\nSeqID_Dict_NoSpaceNames.csv: key to link long sequence read IDs to ShortSeq IDs that will link to taxonomic and functional annotations\n\n\nintermediate-files/\n\n04-compare\n\n14-MAD-mapping-filtered: location of individual salmon outputs for all samples (quant.sf)\n\n\n\n\ncollate-results.py: description of code\n~Arianna - how do you want to handle this?~"
  },
  {
    "objectID": "process-eukrhythmic-output.html#import-metadata",
    "href": "process-eukrhythmic-output.html#import-metadata",
    "title": "eukrhythmic compilation",
    "section": "Import metadata",
    "text": "Import metadata\n\ntic()\nmetadata <- fread(\"input-data/complete-sample-list.txt\", \n                 # verbose = TRUE,\n                 showProgress = TRUE,\n                 nThread = num_threads,\n                 header = TRUE)\ntoc() # 0.042 sec elapsed\n\n\nhead(metadata)\n\n# Order of current names of table\nsrr_order <- data.frame(RUN = (names(counts_all)[2:44]))\n\n# set re-name from metadata, include RUN srr IDs\nsrr_list_rename <- select(metadata, SAMPLENAME, RUN) %>% \n  distinct() %>% \n  unite(SRR_EDGER, SAMPLENAME, RUN, sep = \"-\", remove = FALSE)\n\n# Re-order these based on table\njoined_reorder <- srr_order %>% \n  left_join(srr_list_rename)\n\n# All should be equal to TRUE\nsrr_order == as.character(joined_reorder$RUN)\n\n# Set new names\nsrr_rename <- as.character(joined_reorder$SRR_EDGER)\n\nRename counts table\n\n# srr_rename\nnames(counts_all)\ncolnames(counts_all)[2:44] <- srr_rename\nnames(counts_all)\n\n\nQC read counts with what is annotated\nWhat sequences were not annotated? Remove them from the data.\n\n# ID seqID associated \nhead(counts_all$ShortSeqID) # There are more of these here, than was annotated\n\n# What is total number of ShortSeqIDs?\ntic()\nlength(unique(counts_all$ShortSeqID)); toc()\n# 54,080,665\n\nThere are over 54 million hits of read on contigs.\n\n# head(annot_all)\ntic()\nlength(unique(annot_all$ShortSeqID)); toc() #14,737,135 # 14 million with annotations\n\ntic()\nlength(unique(annot_all$SequenceID)); toc()\n# 14840771 - 14737135\n# 103,636 equate to duplicated ORFs\n\nOf these reads, only 14 million had an annotation. This is 27% of the reads that will be used in downstream analysis.\n\n100*(14840771/54080665)\n\n\n\nRemove unannotated.\n\nseqIDs_wannot <- as.character(unique(annot_all$ShortSeqID))\n\n# Save unannotated\nunannot_counts <- counts_all %>% \n  filter(!(ShortSeqID %in% seqIDs_wannot))\n\ncounts_annot <- counts_all %>% \n  filter(ShortSeqID %in% seqIDs_wannot)\n\nNew counts table.\n\ndim(counts_annot)"
  },
  {
    "objectID": "process-eukrhythmic-output.html#edger",
    "href": "process-eukrhythmic-output.html#edger",
    "title": "eukrhythmic compilation",
    "section": "EdgeR",
    "text": "EdgeR\nPrep matrix of counts\n\nhead(all_counts_matrix)\ny <- dim(all_counts_matrix)[2]\ny # should be 43\n# ?DGEList()\n\n# annot_genes <- annot_all %>% \n  # distinct()\n  # column_to_rownames(var = \"ShortSeqID\")\n# dim(annot_all)\n# dim(annot_genes)\n\n\ntic()\ndge_obj_spot_aloha <- DGEList(counts = all_counts_df,\n                              group = c(rep(\"CA_Catalina_5_May\",6),\n          rep(\"CA_PortofLA_5_May\",6),\n          rep(\"CA_SPOT_150_May\",3),\n          rep(\"CA_SPOT_5_May\",12),\n          rep(\"CA_SPOT_890_May\",4),\n          rep(\"NPSG_ALOHA_1000_July\",1),\n          rep(\"NPSG_ALOHA_1000_March\",1),\n          rep(\"NPSG_ALOHA_119_July\",2),\n          rep(\"NPSG_ALOHA_120_March\",2),\n          rep(\"NPSG_ALOHA_150_July\",1),\n          rep(\"NPSG_ALOHA_150_March\",1),\n          rep(\"NPSG_ALOHA_5_July\",2),\n          rep(\"NPSG_ALOHA_5_March\",2)))\ntoc()\n\n\ndge_obj_spot_aloha$samples\n\ntic()\ndata_tmm <- calcNormFactors(dge_obj_spot_aloha, method=\"TMM\") # TMM normalization\ntoc() # 1290.48 sec elapsed\n\nclass(data_tmm)\n# save(data_tmm, file = \"../../../scratch/user/skhu/SPOT-ALOHA/tmm.RData\")\n\n\nCheckpoint to load TMM data\n\nload(file = \"../../../scratch/user/skhu/SPOT-ALOHA/tmm.RData\", verbose = TRUE)\n\ndata_tmm$samples\n\nGet CPM using normalized library size.\n\ndata_tpm_cpm <- cpm(data_tmm, normalized.lib.sizes = TRUE, log = FALSE)\nclass(data_tpm_cpm) ## outputs a matrix array\n\nhead(data_tpm_cpm)[1:4]\n# Transpose\ntmp <- t(data_tpm_cpm)\nhead(tmp)[,1:2]"
  },
  {
    "objectID": "process-eukrhythmic-output.html#subset-for-test-data",
    "href": "process-eukrhythmic-output.html#subset-for-test-data",
    "title": "eukrhythmic compilation",
    "section": "SUBSET for test data",
    "text": "SUBSET for test data\n\n# dim(tmp)\n# # 14,841,331 # 14 million\n# \nsubset_tmp <- tmp[,1:1000000]\n# class(subset_tmp)\n# head(subset_tmp)[,1:5]\n# \n# # Create a mini one too.\n# mini_subset_tmp <- tmp[,1:10]"
  },
  {
    "objectID": "process-eukrhythmic-output.html#add-metadata",
    "href": "process-eukrhythmic-output.html#add-metadata",
    "title": "eukrhythmic compilation",
    "section": "Add metadata",
    "text": "Add metadata\n\n# ?left_join()\n# metat_cpm_wannot <- metat_cpm %>% \n#   left_join(annot_all, )"
  },
  {
    "objectID": "process-eukrhythmic-output.html#make-tx2gene",
    "href": "process-eukrhythmic-output.html#make-tx2gene",
    "title": "eukrhythmic compilation",
    "section": "Make tx2gene",
    "text": "Make tx2gene\n\n# tic()\n# annot_all <- fread(\"../../../scratch/user/skhu/SPOT-ALOHA/02-annotation_table/TaxonomicAndFunctionalAnnotations.csv\",\n#                  verbose = TRUE,\n#                  showProgress = TRUE,\n#                  nThread = num_threads,\n#                  header = TRUE)\n# toc() # 7.046 sec elapsed\n# ?fread()\n\nDon’t need this\n\n# tx2gene_ko <- annot_all %>%\n#   select(TXNAME = ShortSeqID, GENEID = KEGG_ko)\n# ?tximport()\n\nDon’t need this\n\n# txi_gene <- summarizeToGene(txi_makecounts,\n#                 tx2gene = tx2gene_ko,\n#                 varReduce = FALSE,\n#       ignoreTxVersion = FALSE,\n#       ignoreAfterBar = FALSE,\n#       countsFromAbundance = c(\"no\", \"scaledTPM\", \"lengthScaledTPM\")\n)\n\nDon’t need this\n\n# txi <- tximport(\n#   files = txifiles,\n#   type = \"salmon\",\n#   txIn = TRUE, #Incoming are transcript level\n#   txOut = FALSE, # output transcript-level\n#   countsFromAbundance = c(\"scaledTPM\", # scale to library size\n#                           \"lengthScaledTPM\", # scaled using average transcript length over samples and then library size\n#                           \"dtuScaledTPM\"), # scales using median transcript length among isoforms of a gene, and then library size (requires tx2gene file)\n# )"
  },
  {
    "objectID": "process-eukrhythmic-output.html#stop-here",
    "href": "process-eukrhythmic-output.html#stop-here",
    "title": "eukrhythmic compilation",
    "section": "# STOP HERE",
    "text": "# STOP HERE"
  },
  {
    "objectID": "process-eukrhythmic-output.html#section",
    "href": "process-eukrhythmic-output.html#section",
    "title": "eukrhythmic compilation",
    "section": "",
    "text": "txi_makecounts <- makeCountsFromAbundance(count_metat, tpm_metat, length_metat, countsFromAbundance = c(\"scaledTPM\", \"lengthScaledTPM\"))\n\nImport metadata.\n\nmetadata <- fread(\"input-data/complete-sample-list.txt\", \n                 header = TRUE)\n# class(metadata)\n# View(metadata)\n# head(metadata)\n\nMake sure metadata lines up with input files.\n\n# colData : Rows of colData correspond to columns of countData\n\n# example code:\n# sampleTable <- data.frame(condition = factor(rep(c(\"A\", \"B\"), each = 3)))\n# rownames(sampleTable) <- colnames(txi$counts)\n# dds <- DESeqDataSetFromTximport(txi, sampleTable, ~condition)\n# dds is now ready for DESeq() see DESeq2 vignette"
  },
  {
    "objectID": "process-eukrhythmic-output.html#tximport-step",
    "href": "process-eukrhythmic-output.html#tximport-step",
    "title": "eukrhythmic compilation",
    "section": "tximport step",
    "text": "tximport step\nUse count file, transcript length, and TPM information to obtain length scaled TPM results.\n\ntxi_makecounts <- makeCountsFromAbundance(count_metat, tpm_metat, length_metat, countsFromAbundance = c(\"scaledTPM\", \"lengthScaledTPM\"))"
  },
  {
    "objectID": "process-eukrhythmic-output.html#deseq2-analysis",
    "href": "process-eukrhythmic-output.html#deseq2-analysis",
    "title": "eukrhythmic compilation",
    "section": "DESeq2 analysis",
    "text": "DESeq2 analysis\nFilter low counts\n\n# keep <- rowSums(counts(dds)) >= 10\n# dds <- dds[keep,]\n\nSet factor levels?\n\n# dds$condition <- factor(dds$condition, levels = c(\"untreated\",\"treated\"))\n\n\nDifferential expression analysis\nResults tables are generated using the function results, which extracts a results table with log2 fold changes, p values and adjusted p values. With no additional arguments to results, the log2 fold change and Wald test p value will be for the last variable in the design formula, and if this is a factor, the comparison will be the last level of this variable over the reference level (see previous note on factor levels). However, the order of the variables of the design do not matter so long as the user specifies the comparison to build a results table for, using the name or contrast arguments of results.\nDetails about the comparison are printed to the console, directly above the results table. The text, condition treated vs untreated, tells you that the estimates are of the logarithmic fold change log2(treated/untreated).\nImport all data types, only select 100 rows though.\n\n# Count data, compiled from salmon output\ncount_metat <- fread(\"/vortexfs1/omics/alexander/data/Hu-2022-ALOHA-SPOT/Hu_et_al_2022_eukrhythmic/intermediate-files/salmon_reads_file_coordinated_1June.csv\",\n                     verbose = TRUE,\n                     showProgress = TRUE,\n                     nThread = num_threads,\n                     header = TRUE,\n                     nrow = 1000,\n                     sep = \",\",\n                     colClasses = NULL)\n\n# TPM information from salmon\ntpm_metat <- fread(\"/vortexfs1/omics/alexander/data/Hu-2022-ALOHA-SPOT/Hu_et_al_2022_eukrhythmic/intermediate-files/salmon_tpm_file_coordinated_1June.csv\",\n                   verbose = TRUE,\n                   showProgress = TRUE,\n                   nThread = num_threads,\n                   header = TRUE,\n                   nrow = 1000,\n                   sep = \",\",\n                   colClasses = NULL)\n\n# Transcript length\nlength_metat <- fread(\"/vortexfs1/omics/alexander/data/Hu-2022-ALOHA-SPOT/Hu_et_al_2022_eukrhythmic/intermediate-files/salmon_length_file_coordinated_1June.csv\",\n                      verbose = TRUE,\n                      showProgress = TRUE,\n                      nThread = num_threads,\n                      header = TRUE,\n                      nrow = 1000,\n                      sep = \",\", colClasses = NULL)"
  },
  {
    "objectID": "process-eukrhythmic-output.html#process-test-data-in-tximport",
    "href": "process-eukrhythmic-output.html#process-test-data-in-tximport",
    "title": "eukrhythmic compilation",
    "section": "Process test data in tximport",
    "text": "Process test data in tximport\n\nlength_metat$V1 <- NULL\ntpm_metat$V1 <- NULL\ncount_metat$V1 <- NULL\n\nrownames(length_metat) <- length_metat$ShortSeqID\nrownames(tpm_metat) <- tpm_metat$ShortSeqID\nrownames(count_metat) <- count_metat$ShortSeqID\n#\nlength_metat$ShortSeqID <- NULL\ntpm_metat$ShortSeqID <- NULL\ncount_metat$ShortSeqID <- NULL\n#\ntxi_makecounts <- makeCountsFromAbundance(count_metat, tpm_metat, length_metat, countsFromAbundance = c(\"scaledTPM\", \"lengthScaledTPM\"))\n\nmetadata <- fread(\"complete-sample-list.txt\", header = TRUE)\n\ntxi_makecounts is a “matrix” and “array”"
  },
  {
    "objectID": "process-eukrhythmic-output.html#deseq2-test-run",
    "href": "process-eukrhythmic-output.html#deseq2-test-run",
    "title": "eukrhythmic compilation",
    "section": "DESeq2 test run",
    "text": "DESeq2 test run\n\ndds_tpm_sample <- DESeqDataSetFromTximport(txi_makecounts,\n                                           colData = metadata,\n                                           design = ~SAMPLENAME)"
  },
  {
    "objectID": "process-eukrhythmic-output.html#set-up-r-environment",
    "href": "process-eukrhythmic-output.html#set-up-r-environment",
    "title": "eukrhythmic compilation",
    "section": "Set up R environment",
    "text": "Set up R environment\nLibrary required to execute code in R\n\n## Installations\n# if (!require(\"BiocManager\", quietly = TRUE))\n#     install.packages(\"BiocManager\")\n# BiocManager::install(\"DESeq2\")\n# BiocManager::install(\"tximport\")\n\nLoad necessary libraries & get number of available threads for data.table.\n\n# | message: false\n# | warning: false\nlibrary(data.table)\nlibrary(tidyr)\nlibrary(dplyr)\nlibrary(tximport)\nlibrary(readr)\n\nnum_threads &lt;- getDTthreads()\n# Conflicts between tidyverse and data.table can be ignored\n\nOutput files fromrun_tximport.R provide an RData file that can be used for the DESeq input file (tximport_metaT-ALOHA-CA.Rdata)."
  },
  {
    "objectID": "process-eukrhythmic-output.html#import-to-deseq",
    "href": "process-eukrhythmic-output.html#import-to-deseq",
    "title": "eukrhythmic compilation",
    "section": "Import to DESeq",
    "text": "Import to DESeq\nFor this specific project, we needed to run this R script using a large memory node. We recommend testing it on a subset of data to estimate how much memory you will need. We used a >280GB memory node.\nR script containing code below is also available r-tximport.R\nExample on HPC:\n\nmodule load R/4.3\nRscript r-tximport-061523.R\n\n\nr-tximport.R\n\nlibrary(tidyverse)\nlibrary(tximport)\nlibrary(data.table)\nnum_threads <- getDTthreads()\n\n# Identify location of all \"quant.sf\" files that are output from salmon.\nfiles <- Sys.glob(\"/../../../../intermediate-files/04-compare/14-MAD-mapping-filtered/salmon_sample/*quant/quant.sf\")\n\nRead in or create a sample_table R object.\n\nsample_table <- read.csv(\"input-data/sample_table.csv\")\n\nCombine with list of files, make sure order of files remains.\n\nsample_merged <- data.frame(\"Files\"=files) %>% \n  tidyr::separate(Files,sep=\"salmon_sample/\",into=c(\"Stem\",\"Name\")) %>%\n  tidyr::separate(Name,sep=\"_quant\",into=c(\"SName\",\"Extra\")) %>% \n  dplyr::select(SName) %>%\n  dplyr::left_join(sample_table,by=c(\"SName\"=\"SRR\")) %>%\n  tidyr::unite(\"Sample_rep\", Sample, Replicate, sep = \"_\", remove = FALSE)\n\nnames(files) <- sample_merged$Sample_rep\n\nImport and create the tx2gene object for tximport. tx2gene shows which transcripts belong to which genes for the downstream gene-level inference. Make sure the first colume of tx2gene includes meaningful sequence ID names.\n\ntx2gene <- data.frame(\n  fread(\"/../../../../final-files/03-abundance_tables/SeqID_Dict_NoSpaceNames.csv\", verbose = TRUE, showProgress = TRUE, \n        nThread = num_threads, header = TRUE, colClasses = NULL))\n\ntx2gene$V1 <- NULL\n\nRun tximport. Here, we are importing each salmon file (quant.sf) so tximport can read in the transcript-level abundance, estimated counts, and transcript lengths. This is the most memory intensive step.\n\ntxi <- tximport(files, type = \"salmon\", tx2gene = tx2gene)\n\nCreate a sample metadata table that is, again, in the same order.\n\nmetadata <- read_delim(\"input-data/complete-sample-list.txt\", delim = \",\")\n\nsample_merged <- left_join(sample_merged, metadata, by = c(\"SName\" = \"RUN\"))\n\nwrite_delim(sample_merged, file = \"input-data/sample_merged_txi.txt\")\n\nSet rownames and colnames to the same list of samples.\n\nsample_merged <- read_delim(\"input-data/sample_merged_txi.txt\")\nrownames(sample_merged) <- sample_merged$Sample_rep\nrownames(sample_merged) <- colnames(txi$counts)\n\nImport as DESeq object from tximport.\nWe dont have a control. DESeq will automatically find a control in your levels or list for the design. THere is a way for DESeq toignore this need for a control.\n\nlibrary(DESeq2)\n# colData : Rows of colData correspond to columns of countData\n# design ~ x == serves the purpose of considering biological replicates\n\ndds_tpm <- DESeqDataSetFromTximport(txi,\n                                    colData = sample_merged,\n                                    design = ~0 + SAMPLENAME)\n\nsave(dds_tpm, file = \"/vortexfs1/scratch/sarahhu/dds_tpm.RData\")"
  },
  {
    "objectID": "process-eukrhythmic-output.html#options-in-deseq-to-expore",
    "href": "process-eukrhythmic-output.html#options-in-deseq-to-expore",
    "title": "eukrhythmic compilation",
    "section": "Options in DESeq to expore:",
    "text": "Options in DESeq to expore:\nFilter low counts\n\n# keep <- rowSums(counts(dds)) >= 10\n# dds <- dds[keep,]\n\nSet factor levels?\n\n# dds$condition <- factor(dds$condition, levels = c(\"untreated\",\"treated\"))\n\n\nDifferential expression analysis\nResults tables are generated using the function results, which extracts a results table with log2 fold changes, p values and adjusted p values. With no additional arguments to results, the log2 fold change and Wald test p value will be for the last variable in the design formula, and if this is a factor, the comparison will be the last level of this variable over the reference level (see previous note on factor levels). However, the order of the variables of the design do not matter so long as the user specifies the comparison to build a results table for, using the name or contrast arguments of results.\nDetails about the comparison are printed to the console, directly above the results table. The text, condition treated vs untreated, tells you that the estimates are of the logarithmic fold change log2(treated/untreated).\n\n# dds$condition <- factor(dds$condition, levels = c(\"untreated\",\"treated\"))\n\n\n# dds$SAMPLENAME <- factor() # but this is only for a comparison across two?\n\n# For light and NPSG vs CA...\n# LIGHT + REGION\ndds$LIGHT <- relevel(dds$LIGHT, ref = \"Sub-euphotic\")\ndds$PACIFIC_REGION <- relevel(dds$PACIFIC_REGION, ref = \"CA\")\n# head(metadata)\n\n\n# res <- results(dds, name=\"condition_treated_vs_untreated\")\n# res <- results(dds, contrast=c(\"condition\",\"treated\",\"untreated\"))\n\n\n# dds <- DESeq(dds)\n# \n# res <- results(dds)\n# res\n\nOutput from res: rownames is the gene ID baseMean:average expression level across all samples, normalized by sequencing depth lg2foldchange, of treated vs. untreated padj, adjusted p-value, p-value corrected for multiple testing\nThe text, “condition treated vs untreated”, tells you that the estimates are of the logarithmic fold change log2(treated/untreated).\n\n\nQC read counts with what is annotated\nWhat sequences were not annotated? Remove them from the data.\n\n# ID seqID associated \nhead(counts_all$ShortSeqID) # There are more of these here, than was annotated\n\n# What is total number of ShortSeqIDs?\ntic()\nlength(unique(counts_all$ShortSeqID)); toc()\n# 54,080,665\n\nThere are over 54 million hits of read on contigs.\n\n# head(annot_all)\ntic()\nlength(unique(annot_all$ShortSeqID)); toc() #14,737,135 # 14 million with annotations\n\ntic()\nlength(unique(annot_all$SequenceID)); toc()\n# 14840771 - 14737135\n# 103,636 equate to duplicated ORFs\n\nOf these reads, only 14 million had an annotation. This is 27% of the reads that will be used in downstream analysis.\n\n100*(14840771/54080665)\n\n\n\nRemove unannotated.\n\nseqIDs_wannot <- as.character(unique(annot_all$ShortSeqID))\n\n# Save unannotated\nunannot_counts <- counts_all %>% \n  filter(!(ShortSeqID %in% seqIDs_wannot))\n\ncounts_annot <- counts_all %>% \n  filter(ShortSeqID %in% seqIDs_wannot)\n\nNew counts table.\n\ndim(counts_annot)"
  },
  {
    "objectID": "process-eukrhythmic-output.html#compilation-scripts",
    "href": "process-eukrhythmic-output.html#compilation-scripts",
    "title": "eukrhythmic compilation",
    "section": "",
    "text": "collate-results.py: description of code\n~Arianna - how do you want to handle this?~"
  },
  {
    "objectID": "process-eukrhythmic-output.html#by-sample-name",
    "href": "process-eukrhythmic-output.html#by-sample-name",
    "title": "eukrhythmic compilation",
    "section": "By sample name",
    "text": "By sample name\nFor taxonomic bar plot and overall cluster analysis. (March and July are separate at ALOHA)\nSee how to set up subsetting? https://github.com/WHOIGit/super-waffle/blob/main/01_seqpain_deseq.R\n\nds_tpm_samplename &lt;- DESeqDataSetFromTximport(txi,\n                                    colData = sample_merged,\n                                    design = ~0 + SAMPLENAME)\n\noptional\n\nkeep &lt;- rowSums(counts(ds_tpm_samplename)) &gt;= 10\ndds &lt;- ds_tpm_samplename[keep,]\n\ndds includes &gt; 10. Now dim is 6972094, it was originally, 14737135. Keeping about 47% of data."
  },
  {
    "objectID": "process-eukrhythmic-output.html#extract-count-table",
    "href": "process-eukrhythmic-output.html#extract-count-table",
    "title": "eukrhythmic compilation",
    "section": "Extract count table",
    "text": "Extract count table\n\nlibrary(tximport)\n\ncounts_scaled &lt;- makeCountsFromAbundance(\n  as.matrix(txi$counts),\n  as.matrix(txi$abundance),\n  as.matrix(txi$length),\n  countsFromAbundance = \"scaledTPM\"\n)\n\ncounts_df &lt;- as.data.frame(counts_scaled)\n\nRename so replicates have the same name for counts\n\nnames_orig &lt;- colnames(counts_df)\nnames_new &lt;- sub(\"_[^_]+$\", \"\", names_orig)\ncolnames(counts_df) &lt;- names_new\n\nMean across columns that have the same name - which are replicates.\n\nmean_counts_df &lt;- counts_df %&gt;%\n  cbind(as.list(.) %&gt;%\n    Filter(is.numeric, .) %&gt;%\n    split(names(.)) %&gt;%\n    lapply(as.data.frame) %&gt;%\n    lapply(rowMeans) %&gt;%\n    setNames(paste0(\"mean.\", names(.)))) %&gt;% \n  select(starts_with(\"mean\"))\n\n\nsave(mean_counts_df, sample_merged, file = \"Avg_scaled_tpm_08222023.RData\")"
  },
  {
    "objectID": "process-eukrhythmic-output.html#extract-centered-data",
    "href": "process-eukrhythmic-output.html#extract-centered-data",
    "title": "eukrhythmic compilation",
    "section": "Extract centered data",
    "text": "Extract centered data\nSee “Count data transformations” in https://introtogenomics.readthedocs.io/en/latest/2021.11.11.DeseqTutorial.html\nUse variance Stabilizing Transformation (vst) command to estimate dispersion.\n\n# output is a DESeqtransform object\nvsd_all &lt;- vst(ds_tpm_samplename)\n\n# make a transformed count matrix\n# vsd_blind &lt;- vst(ds_tpm_samplename, blind = FALSE)\n\nExample output: &gt; using ‘avgTxLength’ from assays(dds), correcting for library size\nLook at output with assay.\n\nhead(assay(vsd_all), 4)\n\nExtract as a data frame, where values are center normalized - based on avgTxLength.\n\ndf_ctr_norm &lt;- as.data.frame(assay(vsd_all))\n\n\nsave(df_ctr_norm, file = \"normed_center_df_08222023.RData\")"
  },
  {
    "objectID": "process-eukrhythmic-output.html#euphotic-vs.-subeuphotic-overall",
    "href": "process-eukrhythmic-output.html#euphotic-vs.-subeuphotic-overall",
    "title": "eukrhythmic compilation",
    "section": "Euphotic vs. subeuphotic overall",
    "text": "Euphotic vs. subeuphotic overall\n\n# Subset txi\ntxi_npsg &lt;- subsetTxi(txi, npsg_only, genes_tax_fxn_all)\ntmp_sample_merged &lt;- sample_merged %&gt;% \n  filter(Sample_rep %in% as.character(npsg_only$sample))\nrownames(tmp_sample_merged) &lt;- tmp_sample_merged$Sample_rep\nrownames(tmp_sample_merged) &lt;- colnames(txi_npsg$counts)\n\nds_tpm_npsg_light &lt;- DESeqDataSetFromTximport(txi_npsg,\n                                              colData = tmp_sample_merged,\n                                              design = ~0 + LIGHT)\n\nds_tpm_npsg_month &lt;- DESeqDataSetFromTximport(txi_npsg,\n                                              colData = tmp_sample_merged,\n                                              design = ~0 + MONTH)\n\nsave(ds_tpm_npsg_light, ds_tpm_npsg_month, file = \"/vortexfs1/scratch/sarahhu/txi-objs-metaT/npsg-deseq.RData\")\n\n\ntxi_ca &lt;- subsetTxi(txi, ca_only, genes_tax_fxn_all)\n\ntmp_sample_merged &lt;- sample_merged %&gt;% \n  filter(Sample_rep %in% as.character(ca_only$sample))\nrownames(tmp_sample_merged) &lt;- tmp_sample_merged$Sample_rep\nrownames(tmp_sample_merged) &lt;- colnames(txi_ca$counts)\n\nds_tpm_ca_light &lt;- DESeqDataSetFromTximport(txi_ca,\n                                              colData = tmp_sample_merged,\n                                              design = ~0 + LIGHT)\n\nsave(ds_tpm_ca_light, file = \"/vortexfs1/scratch/sarahhu/txi-objs-metaT/ca-deseq.RData\")\n\nsave(txi_npsg, txi_ca, file = \"/vortexfs1/scratch/sarahhu/txi-objs-metaT/station_txi.RData\")\n\nrm(txi_npsg);rm(txi_ca) #Save room\n\n\nEuphotic vs subeuphotic across regions\n\n# Subset txi\ntxi_euph &lt;- subsetTxi(txi, euphotic, genes_tax_fxn_all)\n\ntmp_sample_merged &lt;- sample_merged %&gt;% \n  filter(Sample_rep %in% as.character(euphotic$sample))\nrownames(tmp_sample_merged) &lt;- tmp_sample_merged$Sample_rep\nrownames(tmp_sample_merged) &lt;- colnames(txi_euph$counts)\n\nds_tpm_euphotic &lt;- DESeqDataSetFromTximport(txi_euph,\n                                              colData = tmp_sample_merged,\n                                              design = ~0 + PACIFIC_REGION)\n\n\ntxi_subeuph &lt;- subsetTxi(txi, subeuphotic, genes_tax_fxn_all)\n\ntmp_sample_merged &lt;- sample_merged %&gt;% \n  filter(Sample_rep %in% as.character(subeuphotic$sample))\nrownames(tmp_sample_merged) &lt;- tmp_sample_merged$Sample_rep\nrownames(tmp_sample_merged) &lt;- colnames(txi_subeuph$counts)\n\n\nds_tpm_subeuphotic &lt;- DESeqDataSetFromTximport(txi_subeuph,\n                                              colData = tmp_sample_merged,\n                                              design = ~0 + PACIFIC_REGION)\n\nsave(ds_tpm_subeuphotic, ds_tpm_euphotic, file = \"/vortexfs1/scratch/sarahhu/txi-objs-metaT/euphotic-subeuphotic-deseq.RData\")\n\nsave(txi_euph, txi_subeuph, file = \"/vortexfs1/scratch/sarahhu/txi-objs-metaT/light_txi.RData\")"
  },
  {
    "objectID": "process-eukrhythmic-output.html#aloha-vs.-ca-samples",
    "href": "process-eukrhythmic-output.html#aloha-vs.-ca-samples",
    "title": "eukrhythmic compilation",
    "section": "ALOHA vs. CA samples",
    "text": "ALOHA vs. CA samples\n\nALOHA euphotic vs CA euphotic\n\n\nALOHA subeuphotic vs. CA sub-euphotic"
  },
  {
    "objectID": "metat-analysis.html#taxonomic-composition-distribution",
    "href": "metat-analysis.html#taxonomic-composition-distribution",
    "title": "Analysis of metatranscriptome data",
    "section": "Taxonomic composition & distribution",
    "text": "Taxonomic composition & distribution\nEvaluate taxonomic diversity and composition across all sites.\n\n# | echo: true\n# | eval: false\nlength(unique(taxfxn$SequenceID))\n# 14840771\n\nlength(unique(rownames(mean_counts_df)))\n# 14737135\n\n\n# | echo: true\n# | eval: false\nannotated_mean &lt;- dplyr::left_join(mean_counts_df %&gt;%\n                   mutate(SequenceID = rownames(mean_counts_df)),\n                                 taxfxn,\n                                 by = \"SequenceID\")\n# 14737135-14737693\n## 558 were duplicated\n\nRemove the duplicated annotations and make a base taxonomic dataframe for downstream work.\n\n# | echo: true\n# | eval: false\ntax_plot &lt;- annotated_mean %&gt;% \n  select(Domain:Species, starts_with(\"mean\"), SequenceID) %&gt;% \n  distinct()\n# dim(tax_plot) #14737624\\\n\n\n# | echo: true\n# | eval: false\nload(\"input-data/tax_plot_08222023.RData\", verbose = TRUE)\n\n\n# | echo: true\n# | eval: false\ntax_only &lt;- tax_plot %&gt;% \n  select(-SequenceID) %&gt;% \n  pivot_longer(cols = starts_with(\"mean\"), names_to = \"SAMPLE\", values_to = \"scaledTPM\") %&gt;% \n  group_by(SAMPLE, Domain, Supergroup, Phylum, Class, Order, Family, Genus, Species) %&gt;% \n    summarise(SUM_scaledTPM = sum(scaledTPM)) \n\n\nload(\"input-data/tax_only_08242023.RData\", verbose = TRUE)\n\nLoading objects:\n  tax_only\n\n\n\nPlot domain level\nCreating plot to see total number and relative abundance of non-eukaryotic hits in the data.\n\n(tax_only %&gt;%\n  mutate(DOMAIN = str_squish(Domain),\n         SAMPLE = str_remove(SAMPLE, \"mean.\")) %&gt;% \n  group_by(SAMPLE, DOMAIN) %&gt;% \n  summarise(SUM = sum(SUM_scaledTPM)) %&gt;% \n  ggplot(aes(x = SAMPLE, y = SUM, fill = DOMAIN)) +\n    geom_bar(stat = \"identity\", position = \"stack\", color = \"black\")+\n    theme_linedraw() +\n    theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1))) /\n(tax_only %&gt;%\n  mutate(DOMAIN = str_squish(Domain),\n         SAMPLE = str_remove(SAMPLE, \"mean.\")) %&gt;% \n  group_by(SAMPLE, DOMAIN) %&gt;% \n  summarise(SUM = sum(SUM_scaledTPM)) %&gt;% \n  ggplot(aes(x = SAMPLE, y = SUM, fill = DOMAIN)) +\n    geom_bar(stat = \"identity\", position = \"fill\", color = \"black\")+\n    theme_linedraw() +\n    theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)))\n\n`summarise()` has grouped output by 'SAMPLE'. You can override using the\n`.groups` argument.\n`summarise()` has grouped output by 'SAMPLE'. You can override using the\n`.groups` argument.\n\n\n\n\n\nStats on what % of the data are eukaryotic vs. not.\n\nSUM_TOTAL_TPM &lt;- sum(tax_only$SUM_scaledTPM)\ntax_only %&gt;%\n  mutate(DOMAIN = str_squish(Domain),\n         SAMPLE = str_remove(SAMPLE, \"mean.\")) %&gt;% \n  filter(SUM_scaledTPM &gt; 0) %&gt;%  # Remove zeroes\n  group_by(DOMAIN) %&gt;% \n    summarise(Sum_of_TPM = sum(SUM_scaledTPM),\n              Perc_of_total = 100*(Sum_of_TPM/SUM_TOTAL_TPM),\n              .groups = \"rowwise\")\n\n# A tibble: 4 × 3\n# Rowwise:  DOMAIN\n  DOMAIN       Sum_of_TPM Perc_of_total\n  &lt;chr&gt;             &lt;dbl&gt;         &lt;dbl&gt;\n1 Archaea         305556.        0.159 \n2 Bacteria       5438767.        2.84  \n3 Eukaryota    185858173.       96.9   \n4 Unclassified    174159.        0.0908\n\n            # Count = count(DOMAIN))\n\n\n\nPlot to supergroup\n\n# head(tax_only)\ntax_only %&gt;%\n  mutate(DOMAIN = str_squish(Domain),\n         SUPERGROUP = str_squish(Supergroup),\n         PHYLUM = str_squish(Phylum),\n         SAMPLE = str_remove(SAMPLE, \"mean.\")) %&gt;% \n  filter(DOMAIN == \"Eukaryota\") %&gt;% \n  group_by(SAMPLE, Supergroup) %&gt;% \n  summarise(SUM = sum(SUM_scaledTPM)) %&gt;% \n  ggplot(aes(x = SAMPLE, y = SUM, fill = Supergroup)) +\n    geom_bar(stat = \"identity\", position = \"fill\", color = \"black\")+\n    theme_linedraw() +\n    theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1))\n\n`summarise()` has grouped output by 'SAMPLE'. You can override using the\n`.groups` argument.\n\n\n\n\n\nTally composition of the supergroup.\n\ncolnames(tax_only)\n\n [1] \"SAMPLE\"        \"Domain\"        \"Supergroup\"    \"Phylum\"       \n [5] \"Class\"         \"Order\"         \"Family\"        \"Genus\"        \n [9] \"Species\"       \"SUM_scaledTPM\"\n\n# unique(tax_only$Phylum)\ntax_names &lt;- tax_only %&gt;%\n  mutate(DOMAIN = str_squish(Domain),\n         SUPERGROUP = str_squish(Supergroup),\n         PHYLUM = str_squish(Phylum),\n         SAMPLE = str_remove(SAMPLE, \"mean.\")) %&gt;% \n  filter(DOMAIN == \"Eukaryota\") %&gt;% \n  select(DOMAIN, SUPERGROUP, Class:Species) %&gt;% \n  distinct()\n\nAdding missing grouping variables: `SAMPLE`, `Domain`, `Supergroup`, `Phylum`\n\nunique(tax_names$Phylum)\n\n [1] \" Apicomplexa\"      \" Ciliophora\"       \" Dinoflagellata\"  \n [4] \" Perkinsea\"        \"Unclassified\"      \" Conosa\"          \n [7] \" Discosea\"         \" Lobosa\"           \" Chlorophyta\"     \n[10] \" Glaucophyta\"      \" Rhodophyta\"       \" Discoba\"         \n[13] \" Cryptophyta\"      \" Hacrobia_X\"       \" Haptophyta\"      \n[16] \" Choanoflagellida\" \" Fungi\"            \" Cercozoa\"        \n[19] \" Foraminifera\"     \" Ochrophyta\"       \" Opalozoa\"        \n[22] \" Sagenista\"        \" Stramenopiles_X\" \n\n\nNow, reformat taxonomic information to visualize.\n\nunique(tax_only$SAMPLE)\n\n [1] \"mean.Catalina\"     \"mean.July_1000m\"   \"mean.July_150m\"   \n [4] \"mean.July_5m\"      \"mean.July_DCM\"     \"mean.March_1000m\" \n [7] \"mean.March_150m\"   \"mean.March_5m\"     \"mean.March_DCM\"   \n[10] \"mean.PortofLA\"     \"mean.SPOT_150m\"    \"mean.SPOT_890m\"   \n[13] \"mean.SPOT_surface\"\n\n# colnames(tax_only)\n# head(sample_metadata)\ntax_formatted &lt;- data.frame(tax_only) %&gt;%\n  # Remove preceding spaces in taxonomic names\n  mutate(across(c(Domain, Supergroup, Phylum, Class, Order, Family, Genus, Species), ~ as.character(str_squish(.)))) %&gt;% \n  filter(Domain == \"Eukaryota\" & SUM_scaledTPM &gt; 0) %&gt;% \n  mutate(SAMPLE_MATCH = str_remove(SAMPLE, \"mean.\")) %&gt;%\n  left_join(sample_metadata, by = \"SAMPLE_MATCH\") %&gt;% \n  # Taxonomic group curation\n  mutate(SUPERGROUP = case_when(\n    Supergroup == \"Alveolata\" ~ paste(Supergroup, Phylum, sep = \"-\"),\n    TRUE ~ Supergroup\n  ))\n\nWarning in left_join(., sample_metadata, by = \"SAMPLE_MATCH\"): Detected an unexpected many-to-many relationship between `x` and `y`.\nℹ Row 1 of `x` matches multiple rows in `y`.\nℹ Row 13 of `y` matches multiple rows in `x`.\nℹ If a many-to-many relationship is expected, set `relationship =\n  \"many-to-many\"` to silence this warning.\n\n# head(tax_formatted)\n\nAssign levels for taxonomic groups.\n\ntax_order_color&lt;-c(\"#612741\",\"#b74a70\",\"#b7757c\",\"#eecfbf\",\"#92462f\",\"#bb603c\",\"#dfa837\",\"#ccc050\",\"#33431e\",\"#93b778\",\"#61ac86\",\"#657abb\",\"#1c1949\",\"#8a8d84\")\nsupergroup_order &lt;- (as.character(unique(tax_formatted$SUPERGROUP)))\nnames(tax_order_color) &lt;- (supergroup_order)\n\n\nFigure 1\n\ntax_formatted %&gt;% \n  mutate(SUPERGROUP = factor(tax_formatted$SUPERGROUP, levels = supergroup_order)) %&gt;% \n  group_by(SAMPLE_ID_PARSED, PACIFIC_REGION, LIGHT, DEPTH, SUPERGROUP) %&gt;% \n  summarise(SUM = sum(SUM_scaledTPM)) %&gt;% \n  ggplot(aes(x = SAMPLE_ID_PARSED, y = SUM, fill = SUPERGROUP)) +\n    geom_bar(stat = \"identity\", position = \"fill\", color = \"black\")+\n    facet_grid(rows = vars(PACIFIC_REGION), scales = \"free_y\", space = \"free\") +\n    scale_fill_manual(values = tax_order_color) +\n    theme_classic() +\n    coord_flip() +\n    theme(axis.text.x = element_text(vjust = 1, hjust = 1)) +\n    labs(x = \"\", y = \"TPM Relative Abundance\")\n\n`summarise()` has grouped output by 'SAMPLE_ID_PARSED', 'PACIFIC_REGION',\n'LIGHT', 'DEPTH'. You can override using the `.groups` argument."
  },
  {
    "objectID": "metat-analysis.html#euphotic-and-subeuphotic-only",
    "href": "metat-analysis.html#euphotic-and-subeuphotic-only",
    "title": "Analysis of metatranscriptome data",
    "section": "Euphotic and subeuphotic only",
    "text": "Euphotic and subeuphotic only\nsubeuphotic:in the subeuphotic, upreg in npsg or CA euphotic: in the euphotic only, upreg in NPSG or CA\n\nload(\"/vortexfs1/scratch/sarahhu/txi-objs-metaT/euphotic-subeuphotic-deseq.RData\")\n\n\n# Euphotic\ngroupsize &lt;- 2\nkeep &lt;- rowSums(counts(ds_tpm_euphotic) &gt;= 50) &gt;= groupsize\nds_tpm_light_filtered &lt;- ds_tpm_euphotic[keep,]\n\ndds_obj_filtered$PACIFIC_REGION &lt;- factor(dds_obj_filtered$PACIFIC_REGION, levels = c(\"CA\", \"NPSG\"))\n\n# this step takes time\ndds_light &lt;- DESeq2::DESeq(ds_tpm_light_filtered) \n# report results\nres_euphotic_reg &lt;- results(dds_light)\n\n\n# Subeuphotic\ngroupsize &lt;- 2\nkeep &lt;- rowSums(counts(ds_tpm_subeuphotic) &gt;= 50) &gt;= groupsize\nds_tpm_light_filtered &lt;- ds_tpm_subeuphotic[keep,]\n\ndds_obj_filtered$PACIFIC_REGION &lt;- factor(dds_obj_filtered$PACIFIC_REGION, levels = c(\"CA\", \"NPSG\"))\n\n# this step takes time\ndds_light &lt;- DESeq2::DESeq(ds_tpm_light_filtered) \n# report results\nres_subeuphotic_reg &lt;- results(dds_light)\n\n\nsave(res_subeuphotic_reg, res_euphotic_reg, file = \"DE_results_region_light.RData\")\n\n\nAug 25 ** this is all running on poseidon!\n\n\nBring locally.\n\n# load(\"input-data/DE_results_light.RData\", verbose = TRUE)\n\nGet stats on these outputs.\n\n# summary(res_light)\n# summary(res_pacific)\n# hist(res_pacific$log2FoldChange)\n\n\n# plotMA(res_light)\n# plotMA(res_lightpac)\n# plotMA(res_light_05)"
  },
  {
    "objectID": "process-eukrhythmic-output.html#subseting-txi",
    "href": "process-eukrhythmic-output.html#subseting-txi",
    "title": "eukrhythmic compilation",
    "section": "Subseting txi",
    "text": "Subseting txi\n\nSamples\nUse the metadata data frame to create sample lists for the comparisons we want to do.\n\nmetadata &lt;- read.csv(\"input-data/sample-list-revised.txt\")\n# head(metadata)\n# unique(metadata$REGION)\n\nAs is, we can do LIGHT and PACIFIC_REGION - these are binary.\n\nds_tpm_light &lt;- DESeqDataSetFromTximport(txi,\n                                              colData = sample_merged,\n                                              design = ~0 + LIGHT)\n\nds_tpm_pac &lt;- DESeqDataSetFromTximport(txi,\n                                              colData = sample_merged,\n                                              design = ~0 + PACIFIC_REGION)\n\nds_tpm_lightpac &lt;- DESeqDataSetFromTximport(txi,\n                                              colData = sample_merged,\n                                              design = ~0 + PACIFIC_REGION + LIGHT)\n\nsave(ds_tpm_light, ds_tpm_pac, ds_tpm_lightpac, file = \"light-pacregion-deseq.RData\")\n\nCompare and contrast within regions.\n\nnpsg_only &lt;- metadata %&gt;% \n  filter(PACIFIC_REGION == \"NPSG\") %&gt;% \n  select(sample = SAMPLE)\n# Compare euphotic and subeuphotic\n# Use this to compare across months too\n\nca_only &lt;- metadata %&gt;% \n  filter(PACIFIC_REGION != \"NPSG\") %&gt;% \n  select(sample = SAMPLE)\n# Compare euphotic and subeuphotic\n\nca_coast &lt;- metadata %&gt;% \n  filter(PACIFIC_REGION != \"NPSG\" & REGION != \"SPOT\") %&gt;% \n  select(sample = SAMPLE)\n# compare POLA vs. Catalina\n\nstations_only &lt;- metadata %&gt;% \n  filter(REGION == \"SPOT\" | REGION == \"ALOHA\") %&gt;% \n  select(sample = SAMPLE)\n# compare SPOT vs. ALOHA as is\n\neuphotic &lt;- metadata %&gt;% \n  filter(LIGHT == \"Euphotic\")%&gt;% \n  select(sample = SAMPLE)\n# Compare NPSG to CA euphotic zone\n\nsubeuphotic &lt;- metadata %&gt;% \n  filter(LIGHT != \"Euphotic\")%&gt;% \n  select(sample = SAMPLE)\n# Compare NPSG to CA subeuphotic zone\n\n\n\nGenes\nNeed to make a list of the SequenceID from the taxonomy and functional annotations.\n\ntaxfxn &lt;- read.csv(\"TaxonomicAndFunctionalAnnotations.csv\")\n\nR objects that are character lists will be most useful.\n\n# Get list of annotations where a GO, PFAM, and KEGG ID were assigned.\ngenes_fxn_all &lt;- as.character(\n  filter(taxfxn, GOs != \"-\" & PFAMs != \"-\" & KEGG_ko != \"-\") %&gt;% \n    select(SequenceID) %&gt;% \n    .[[\"SequenceID\"]]) #this line outputs the selected vector from the pipe\n\n# Removing unclassified and unannotated sequences\ngenes_tax_fxn_all &lt;- as.character(\n  filter(taxfxn, GOs != \"-\" & PFAMs != \"-\" & KEGG_ko != \"-\"\n         & Domain == \"Eukaryota\" & Supergroup != \"Unclassified\") %&gt;% \n    select(SequenceID) %&gt;% \n    .[[\"SequenceID\"]])\n\nFrom KEGG database reformatting, extract this Robject, key_geneid\n\n# head(key_geneid)\nkegg_keep &lt;- as.character(key_geneid %&gt;% \n  filter(Category01 != \"\" & !(is.na(Category01))) %&gt;% \n  select(KEGG) %&gt;% \n  .[[\"KEGG\"]])\n \nlength(kegg_keep)\n\ngenes_kegg_curated &lt;- as.character(taxfxn %&gt;%\n    mutate(KEGG_mod = str_remove_all(KEGG_ko, \"ko:\")) %&gt;% \n    filter(KEGG_mod %in% kegg_keep) %&gt;% \n    select(SequenceID) %&gt;% \n    .[[\"SequenceID\"]])\n\nSave objects for subsetting.\n\nsave(genes_fxn_all, genes_tax_fxn_all, key_geneid,\n     npsg_only, ca_only, ca_coast, stations_only, euphotic, subeuphotic,\n     file = \"sample-gene-lists_TXISUBSET.RData\")\n\n\n\nFunction\n\n# Subset txi directly\nsubsetTxi &lt;- function(txi, samples, include_genes=rownames(txi$counts))\n  {\n  genes &lt;- rownames(txi$counts)[rownames(txi$counts) %in% include_genes]\n  txi$abundance &lt;- txi$abundance[genes, samples$sample]\n  txi$counts &lt;- txi$counts[genes, samples$sample]\n  txi$length &lt;- txi$length[genes, samples$sample]\n  return(txi)\n  }\n\n# Example usage \n# tmp &lt;- sample(taxfxn$SequenceID,10,replace = FALSE)\n# pola &lt;- data.frame(sample = c(\"PortofLA_1\", \"PortofLA_2\"))\n# txi_pola &lt;- subsetTxi(txi, pola, tmp)"
  },
  {
    "objectID": "process-eukrhythmic-output.html#subset-to-genes-of-interest-only",
    "href": "process-eukrhythmic-output.html#subset-to-genes-of-interest-only",
    "title": "eukrhythmic compilation",
    "section": "Subset to genes of interest only",
    "text": "Subset to genes of interest only\n\ntaxfxn &lt;- read.csv(\"TaxonomicAndFunctionalAnnotations.csv\")\n\n\nlibrary(tximport)\nlibrary(tidyverse)\n\n\nall_samples &lt;- metadata %&gt;% \n  select(sample = SAMPLE)\n\ntxi_curated &lt;- subsetTxi(txi, all_samples, genes_kegg_curated)\n\n\ncounts_scaled_curated &lt;- makeCountsFromAbundance(\n  as.matrix(txi_curated$counts),\n  as.matrix(txi_curated$abundance),\n  as.matrix(txi_curated$length),\n  countsFromAbundance = \"scaledTPM\"\n)\n\ncounts_df_curated &lt;- as.data.frame(counts_scaled_curated)\n\nnames_orig &lt;- colnames(counts_df_curated)\nnames_new &lt;- sub(\"_[^_]+$\", \"\", names_orig)\ncolnames(counts_df_curated) &lt;- names_new\n\nmean_counts_df_curated &lt;- counts_df_curated %&gt;%\n  cbind(as.list(.) %&gt;%\n    Filter(is.numeric, .) %&gt;%\n    split(names(.)) %&gt;%\n    lapply(as.data.frame) %&gt;%\n    lapply(rowMeans) %&gt;%\n    setNames(paste0(\"mean.\", names(.)))) %&gt;% \n  select(starts_with(\"mean\"))\n\n\ncounts_curated &lt;- mean_counts_df_curated %&gt;% \n  rownames_to_column(var = \"SequenceID\") %&gt;% \n  left_join(taxfxn)\n\nsave(counts_curated, sample_merged, file = \"Avg_scaled_tpm_curated_08252023.RData\")\n\n\ntmp_sample_merged &lt;- sample_merged %&gt;% \n  filter(Sample_rep %in% as.character(all_samples$sample))\n\nrownames(tmp_sample_merged) &lt;- tmp_sample_merged$Sample_rep\nrownames(tmp_sample_merged) &lt;- colnames(txi_curated$counts)\n\nds_tpm_curated &lt;- DESeqDataSetFromTximport(txi_curated,\n                                    colData = tmp_sample_merged,\n                                    design = ~0 + SAMPLENAME)\n\nvsd_all &lt;- vst(ds_tpm_curated)\n\ndf_ctr_norm_curated &lt;- as.data.frame(assay(vsd_all))\n\nctr_norm_curated &lt;- df_ctr_norm_curated %&gt;% \n  rownames_to_column(var = \"SequenceID\") %&gt;% \n  left_join(taxfxn)\n\n\nsave(ctr_norm_curated, ds_tpm_curated, file = \"normed_center_df_curated_08252023.RData\")"
  }
]
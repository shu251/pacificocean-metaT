---
title: "eukrhythmic compilation"
execute:
  echo: true
  eval: false
format:
  html:
    code-overflow: wrap
editor: visual
---

# Working with eukrhythmic output files

**List of output directories**:

`final-files/`

-   `00-nucleotide_assembly/`
    -   `MAD.filtered.nospace.fasta`: Full length sequences of merged assembly groups (MAD) that have been de-duplicated
-   `01-predicted_proteins/`
    -   `MAD.fasta.transdecoder.cds`: Identified coding regions of transcripts from the Merged assembly groups (MAD)
    -   `MAD.fasta.transdecoder.pep`: Translated peptide sequences from the Merged assembly groups (MAD)
-   `02-annotation_table/`
    -   `TaxonomicAndFunctionalAnnotations.csv`: Taxonomic levels, GOs, PFAMs, and KEGG KOs - assigned by short seq ID and the full sequence ID.
-   `03-abundance_tables/`
    -   `SeqID_Dict_NoSpaceNames.csv`: key to link long sequence read IDs to ShortSeq IDs that will link to taxonomic and functional annotations

`intermediate-files/`

-   `04-compare`
    -   `14-MAD-mapping-filtered`: location of individual salmon outputs for all samples (quant.sf)

## Compilation scripts

`collate-results.py`: *description of code*

\~Arianna - how do you want to handle this?\~

# Obtain library normalized count data

R script to run this: `run_tximport.R`.

Our goal is to take eukrhthymic estimated counts (from salmon) to get transcript-level abundance estimates that will account for gene length. The outcome from this is that we get average transcript length across samples. For this we want to import all data into DESeq using tximport as an interface.

-   tximport
    -   *Why tximport*? tximport allows us to correct for the changes in gene length across our samples. This way we can use transcript-level estimates for our metatranscriptomic analysis. Also, tximport knows the output from salmon, so we can easily put the salmon output into tximport. Then it can link directly to edgeR or DESeq2.
-   DESeq
    -   DESeq: Love, M.I., Huber, W., Anders, S. (2014) Moderated estimation of fold change and dispersion for RNA-seq data with DESeq2. Genome Biology, 15:550. 10.1186/s13059-014-0550-8
    -   Explaination using DESeq: https://hbctraining.github.io/DGE_workshop/lessons/02_DGE_count_normalization.html
    -   https://bioconductor.org/packages/release/bioc/manuals/DESeq2/man/DESeq2.pdf

## Set up R environment

Library required to execute code in R

```{r}
## Installations
# if (!require("BiocManager", quietly = TRUE))
#     install.packages("BiocManager")
# BiocManager::install("DESeq2")
# BiocManager::install("tximport")
```

Load necessary libraries & get number of available threads for data.table.

```{r}
# | message: false
# | warning: false
library(data.table)
library(tidyr)
library(dplyr)
library(tximport)
library(readr)

num_threads <- getDTthreads()
# Conflicts between tidyverse and data.table can be ignored
```

Output files from`run_tximport.R` provide an RData file that can be used for the DESeq input file (`tximport_metaT-ALOHA-CA.Rdata`).

# DESeq2 analysis

Import as DESeq object from tximport.

DESeq will automatically find a control in your levels or list for the design. There is a way for DESeq to ignore this need for a control.

SEE SHARON GRIM'S CODE

```{r}
library(DESeq2)
library(tidyverse)
load("tximport_metaT-ALOHA-CA.Rdata", verbose = TRUE)
# colData : Rows of colData correspond to columns of countData
# design ~ x == serves the purpose of considering biological replicates
```

> Loading objects: txi sample_merged

## By sample name

For taxonomic bar plot and overall cluster analysis. (March and July are separate at ALOHA)

See how to set up subsetting? https://github.com/WHOIGit/super-waffle/blob/main/01_seqpain_deseq.R

```{r}
ds_tpm_samplename <- DESeqDataSetFromTximport(txi,
                                    colData = sample_merged,
                                    design = ~0 + SAMPLENAME)

```

*optional*

```{r}
keep <- rowSums(counts(ds_tpm_samplename)) >= 10
dds <- ds_tpm_samplename[keep,]
```

`dds` includes \> 10. Now dim is 6972094, it was originally, 14737135. Keeping about 47% of data.

## Extract count table

```{r}
library(tximport)

counts_scaled <- makeCountsFromAbundance(
  as.matrix(txi$counts),
  as.matrix(txi$abundance),
  as.matrix(txi$length),
  countsFromAbundance = "scaledTPM"
)

counts_df <- as.data.frame(counts_scaled)

```

Rename so replicates have the same name for counts

```{r}
names_orig <- colnames(counts_df)
names_new <- sub("_[^_]+$", "", names_orig)
colnames(counts_df) <- names_new
```

Mean across columns that have the same name - which are replicates.

```{r}
mean_counts_df <- counts_df %>%
  cbind(as.list(.) %>%
    Filter(is.numeric, .) %>%
    split(names(.)) %>%
    lapply(as.data.frame) %>%
    lapply(rowMeans) %>%
    setNames(paste0("mean.", names(.)))) %>% 
  select(starts_with("mean"))
```

```{r}
save(mean_counts_df, sample_merged, file = "Avg_scaled_tpm_08222023.RData")
```

## Extract centered data

See "Count data transformations" in https://introtogenomics.readthedocs.io/en/latest/2021.11.11.DeseqTutorial.html

Use variance Stabilizing Transformation (`vst`) command to estimate dispersion.

```{r}
# output is a DESeqtransform object
vsd_all <- vst(ds_tpm_samplename)

# make a transformed count matrix
# vsd_blind <- vst(ds_tpm_samplename, blind = FALSE)
```

Example output: \> using 'avgTxLength' from assays(dds), correcting for library size

Look at output with assay.

```{r}
head(assay(vsd_all), 4)
```

Extract as a data frame, where values are center normalized - based on avgTxLength.

```{r}
df_ctr_norm <- as.data.frame(assay(vsd_all))
```

```{r}
save(df_ctr_norm, file = "normed_center_df_08222023.RData")
```

# DEseq2 reanalysis for DE genes

Repeat DESeq2 design to extracted differentially expressed genes for specific patterns below. Subset is required ahead of time - we can do this with txi directly.

See script `run_subset_deseq2.R`


## Subseting txi

### Samples
Use the metadata data frame to create sample lists for the comparisons we want to do.

```{r}
metadata <- read.csv("input-data/sample-list-revised.txt")
head(metadata)
unique(metadata$REGION)
```

As is, we can do LIGHT and PACIFIC_REGION - these are binary.

Compare and contrast within regions.

```{r}
npsg_only <- metadata %>% 
  filter(PACIFIC_REGION == "NPSG") %>% 
  select(sample = SAMPLE)
# Compare euphotic and subeuphotic
# Use this to compare across months too

ca_only <- metadata %>% 
  filter(PACIFIC_REGION != "NPSG") %>% 
  select(sample = SAMPLE)
# Compare euphotic and subeuphotic

ca_coast <- metadata %>% 
  filter(PACIFIC_REGION != "NPSG" & REGION != "SPOT") %>% 
  select(sample = SAMPLE)
# compare POLA vs. Catalina

stations_only <- metadata %>% 
  filter(REGION == "SPOT" | REGION == "ALOHA") %>% 
  select(sample = SAMPLE)
# compare SPOT vs. ALOHA as is

euphotic <- metadata %>% 
  filter(LIGHT == "Euphotic")%>% 
  select(sample = SAMPLE)
# Compare NPSG to CA euphotic zone

subeuphotic <- metadata %>% 
  filter(LIGHT != "Euphotic")%>% 
  select(sample = SAMPLE)
# Compare NPSG to CA subeuphotic zone
```



### Genes

Need to make a list of the `SequenceID` from the taxonomy and functional annotations.

```{r}
taxfxn <- read.csv("TaxonomicAndFunctionalAnnotations.csv")
```

R objects that are character lists will be most useful.

```{r}
# Get list of annotations where a GO, PFAM, and KEGG ID were assigned.
genes_fxn_all <- as.character(
  filter(taxfxn, GOs != "-" & PFAMs != "-" & KEGG_ko != "-") %>% 
    select(SequenceID) %>% 
    .[["SequenceID"]]) #this line outputs the selected vector from the pipe

# Removing unclassified and unannotated sequences
genes_tax_fxn_all <- as.character(
  filter(taxfxn, GOs != "-" & PFAMs != "-" & KEGG_ko != "-"
         & Domain == "Eukaryota" & Supergroup != "Unclassified") %>% 
    select(SequenceID) %>% 
    .[["SequenceID"]])
```


From KEGG database reformatting, extract this Robject, `key_geneid`

```{r}
# head(key_geneid)
kegg_keep <- as.character(key_geneid %>% 
  filter(Category01 != "" & !(is.na(Category01))) %>% 
  select(KEGG) %>% 
  .[["KEGG"]])
 
length(kegg_keep)

genes_kegg_curated <- as.character(taxfxn %>%
    mutate(KEGG_mod = str_remove_all(KEGG_ko, "ko:")) %>% 
    filter(KEGG_mod %in% kegg_keep) %>% 
    select(SequenceID) %>% 
    .[["SequenceID"]])
```

Save objects for subsetting.

```{r}
# save(genes_fxn_all, genes_tax_fxn_all, key_geneid, 
#      npsg_only, ca_only, ca_coast, stations_only, euphotic, subeuphotic,
#      file = "sample-gene-lists_TXISUBSET.RData")
```


### Function

```{r}
# Subset txi directly
subsetTxi <- function(txi, samples, include_genes=rownames(txi$counts))
  {
  genes <- rownames(txi$counts)[rownames(txi$counts) %in% include_genes]
  txi$abundance <- txi$abundance[genes, samples$sample]
  txi$counts <- txi$counts[genes, samples$sample]
  txi$length <- txi$length[genes, samples$sample]
  return(txi)
  }

# Example usage 
# tmp <- sample(taxfxn$SequenceID,10,replace = FALSE)
# pola <- data.frame(sample = c("PortofLA_1", "PortofLA_2"))
# txi_pola <- subsetTxi(txi, pola, tmp)
```


## Euphotic vs. subeuphotic overall

```{r}
# Subset txi
txi_npsg <- subsetTxi(txi, npsg_only, genes_tax_fxn_all)
# txi_npsg_curated <- subsetTxi(txi, npsg_only, genes_kegg_curated)

txi_ca <- subsetTxi(txi, ca_only, genes_tax_fxn_all)
# txi_ca_curated <- subsetTxi(txi, ca_only, genes_kegg_curated)

# counts_scaled <- makeCountsFromAbundance(
#   as.matrix(txi$counts),
#   as.matrix(txi$abundance),
#   as.matrix(txi$length),
#   countsFromAbundance = "scaledTPM"
# )
# counts_df <- as.data.frame(counts_scaled)

ds_tpm_light <- DESeqDataSetFromTximport(txi,
                                              colData = sample_merged,
                                              design = ~0 + LIGHT)

ds_tpm_npsg_light <- DESeqDataSetFromTximport(txi_npsg,
                                              colData = sample_merged,
                                              design = ~0 + LIGHT)

ds_tpm_npsg_month <- DESeqDataSetFromTximport(txi_npsg,
                                              colData = sample_merged,
                                              design = ~0 + MONTH)

ds_tpm_ca_light <- DESeqDataSetFromTximport(txi_ca,
                                              colData = sample_merged,
                                              design = ~0 + LIGHT)
```

### Euphotic vs subeuphotic across regions

```{r}
# Subset txi
txi_euph <- subsetTxi(txi, euphotic, genes_tax_fxn_all)

txi_subeuph <- subsetTxi(txi, subeuphotic, genes_tax_fxn_all)

ds_tpm_euphotic <- DESeqDataSetFromTximport(txi_euph,
                                              colData = sample_merged,
                                              design = ~0 + PACIFIC_REGION)

ds_tpm_subeuphotic <- DESeqDataSetFromTximport(txi_subeuph,
                                              colData = sample_merged,
                                              design = ~0 + PACIFIC_REGION)
```

